'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var PropTypes = _interopDefault(require('prop-types'));

function styleInject(css, ref) {
  if ( ref === void 0 ) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') { return; }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css = "/* add css styles here (optional) */\n\n.styles_test__3OKZ1 {\n  display: inline-block;\n  margin: 2em auto;\n  border: 2px solid #000;\n  font-size: 2em;\n}\n";
styleInject(css);

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};

var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

var PenDraw = function (_Component) {
  inherits(PenDraw, _Component);

  function PenDraw() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, PenDraw);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = PenDraw.__proto__ || Object.getPrototypeOf(PenDraw)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      cvs: null,
      ctx: null,
      mouse: 0,
      x1: 0,
      y1: 0,
      x2: 0,
      y2: 0,
      clearScreen: 0
    }, _this.onMouseUp = function (e) {
      _this.setState({ mouse: 0 });
    }, _this.onMouseDown = function (e) {
      var p = _this.getMousePos(e);
      _this.setState({
        mouse: 1,
        x1: p.x,
        y1: p.y
      });
    }, _this.onMouseMove = function (e) {
      var _this$state = _this.state,
          x1 = _this$state.x1,
          y1 = _this$state.y1,
          mouse = _this$state.mouse;

      if (mouse) {
        var p = _this.getMousePos(e);
        _this.setState({ x2: p.x, y2: p.y });
        _this.drawLine({ x: x1, y: y1 }, p);
        _this.setState({
          x1: p.x,
          y1: p.y
        });
      }
    }, _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(PenDraw, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var cvs = document.getElementById("mycanvas");
      var ctx = cvs.getContext("2d");
      this.setState({ cvs: cvs, ctx: ctx });
    }
  }, {
    key: 'UNSAFE_componentWillReceiveProps',
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      if (nextProps.clearScreen) {
        this.clearCanvas();
      }
    }
  }, {
    key: 'getMousePos',
    value: function getMousePos(e) {
      var rect = this.state.cvs.getBoundingClientRect();
      return {
        x: e.clientX - rect.left,
        y: e.clientY - rect.top
      };
    }
  }, {
    key: 'clearCanvas',
    value: function clearCanvas() {
      var cvs = document.getElementById("mycanvas");
      var ctx = cvs.getContext("2d");
      ctx.save();
      ctx.globalCompositeOperation = "copy";
      ctx.strokeStyle = "transparent";
      ctx.beginPath();
      ctx.lineTo(0, 0);
      ctx.stroke();
      ctx.restore();
    }
  }, {
    key: 'drawLine',
    value: function drawLine(p, q) {
      var ctx = this.state.ctx;
      ctx.beginPath();
      ctx.strokeStyle = this.props.lineColor;
      ctx.lineJoin = "round";
      ctx.lineCap = "round";
      ctx.lineWidth = this.props.lineWidth;
      ctx.moveTo(p.x, p.y);
      ctx.lineTo(q.x, q.y);
      ctx.stroke();
    }
  }, {
    key: 'render',
    value: function render() {
      var style = this.props.style;


      return React__default.createElement(
        'div',
        null,
        React__default.createElement('canvas', {
          id: 'mycanvas',
          width: style ? style.width : "200px", height: style ? style.height : "200px",
          style: _extends({}, style),
          onMouseUp: this.onMouseUp,
          onMouseDown: this.onMouseDown,
          onMouseMove: this.onMouseMove
        })
      );
    }
  }]);
  return PenDraw;
}(React.Component);

PenDraw.propTypes = {
  style: PropTypes.object,
  clearScreen: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),
  lineWidth: PropTypes.number,
  lineColor: PropTypes.string
};

module.exports = PenDraw;
//# sourceMappingURL=index.js.map
