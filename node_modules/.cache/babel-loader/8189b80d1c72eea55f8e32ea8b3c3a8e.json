{"ast":null,"code":"var _jsxFileName = \"/home/george/projects/beads/beads/src/components/Canvas.js\";\nimport React, { Component } from 'react';\nimport './Canvas.css';\nimport { connect } from 'react-redux';\nimport Bead from './Bead';\nimport Brush from './Brush';\nimport { placeBead, setBrushPosition, undo, redo, setMouseStatus } from '../actions/rootActions';\nimport GridLine from './GridLine';\nimport { MOUSE_HELD } from '../constants/constants';\nimport Button from 'react-bootstrap/Button';\n\nfunction mapStateToProps(state) {\n  return {\n    beads: state.beads,\n    brushPosition: state.brushPosition,\n    activeColor: state.activeColor,\n    mouseStatus: state.mouseStatus\n  };\n}\n\n;\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    placeBead: beads => dispatch(placeBead(beads)),\n    setBrushPosition: xy => dispatch(setBrushPosition(xy)),\n    undo: () => dispatch(undo()),\n    redo: () => dispatch(redo()),\n    setMouseStatus: status => dispatch(setMouseStatus(status))\n  };\n}\n\nfunction getBeadHash(x, y) {\n  return x + \" \" + y;\n}\n\nconst beadSize = 20;\nconst snapX = beadSize / 2;\nconst snapY = beadSize;\n\nclass ConnectedCanvas extends Component {\n  constructor(props) {\n    super(props);\n    this.intervalId = 0;\n    this.placeObject = this.placeObject.bind(this);\n    this._onMouseMove = this._onMouseMove.bind(this);\n    this.snap = this.snap.bind(this);\n    this.mouseUp = this.mouseUp.bind(this);\n    this.mouseDown = this.mouseDown.bind(this);\n  }\n\n  checkCollisions(x, y, snapX, snapY) {\n    const beads = this.props.beads;\n    const center = beads[getBeadHash(x, y)]; // const topLeft = beads[getBeadHash(x-snapX, y-snapY)];\n    // const top = beads[getBeadHash(x, y-snapY)];\n    // const topRight = beads[getBeadHash(x+snapX, y-snapY)];\n\n    const right = beads[getBeadHash(x + snapX, y)]; // const bottomRight = beads[getBeadHash(x+snapX, y+snapY)];\n    // const bottom = beads[getBeadHash(x, y+snapY)];\n    // const botomLeft = beads[getBeadHash(x-snapX, y+snapY)];\n\n    const left = beads[getBeadHash(x - snapX, y)];\n    return center || left || right; // topLeft || top || topRight || right || bottomRight || bottomRight || botomLeft || left || bottom;\n  }\n\n  snap(numToRound, multiple) {\n    if (multiple === 0) return numToRound;\n    var remainder = numToRound % multiple;\n    if (remainder === 0) return numToRound;\n    return numToRound + multiple - remainder;\n  }\n\n  brush() {\n    var x = this.props.brushPosition.x;\n    var y = this.props.brushPosition.y;\n    return React.createElement(Brush, {\n      x: x,\n      y: y,\n      width: beadSize,\n      height: beadSize,\n      color: this.props.activeColor,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    });\n  }\n\n  mouseDown() {\n    // this.setState({mouseHeld: true});\n    console.log(\"mouseDown\");\n    this.props.setMouseStatus(MOUSE_HELD);\n  }\n\n  mouseUp() {\n    console.log(\"mouseUp\");\n    this.props.setMouseStatus(\"\"); // this.setState({mouseHeld: false});\n  }\n\n  placeObject() {\n    let beads = Object.assign({}, this.props.beads);\n    var x = this.props.brushPosition.x;\n    var y = this.props.brushPosition.y;\n\n    if (!this.checkCollisions(x, y, snapX, snapY)) {\n      beads[getBeadHash(x, y)] = React.createElement(Bead, {\n        x: x,\n        y: y,\n        width: beadSize,\n        height: beadSize,\n        color: this.props.activeColor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      });\n      this.props.placeBead(beads);\n    }\n  }\n\n  _onMouseMove(e) {\n    var x = e.clientX - beadSize;\n    var y = e.clientY - beadSize;\n    x = this.snap(x, beadSize / 2);\n    y = this.snap(y, beadSize);\n    this.props.setBrushPosition({\n      x: x,\n      y: y\n    });\n    console.log(this.props.mouseStatus);\n\n    if (this.props.mouseStatus == MOUSE_HELD) {\n      this.placeObject();\n    }\n  }\n\n  renderGridLines() {\n    var numXLines = window.innerWidth / snapX;\n    var numYLines = window.innerHeight / snapY;\n    var lines = [];\n\n    for (var i = 1; i < numXLines; i++) {\n      var x = i * snapX;\n      lines.push(React.createElement(GridLine, {\n        x: x,\n        color: \"#4E4E4E\",\n        height: \"100%\",\n        width: 1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }));\n    }\n\n    for (var i = .5; i < numYLines; i++) {\n      var y = i * snapY;\n      lines.push(React.createElement(GridLine, {\n        y: y,\n        color: \"#4E4E4E\",\n        height: 1,\n        width: \"100%\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }));\n    }\n\n    return lines;\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: \"Canvas\",\n      id: \"canvas\",\n      onMouseMove: this._onMouseMove,\n      onMouseDown: this.mouseDown,\n      onMouseUp: this.mouseUp,\n      onClick: this.placeObject,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, this.renderGridLines(), Object.values(this.props.beads), this.brush()), React.createElement(Button, {\n      onClick: this.props.undo,\n      variant: \"light\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, \"Undo\"), React.createElement(Button, {\n      onClick: this.props.redo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, \"Redo\"));\n  }\n\n}\n\nconst Canvas = connect(mapStateToProps, mapDispatchToProps)(ConnectedCanvas);\nexport default Canvas;","map":{"version":3,"sources":["/home/george/projects/beads/beads/src/components/Canvas.js"],"names":["React","Component","connect","Bead","Brush","placeBead","setBrushPosition","undo","redo","setMouseStatus","GridLine","MOUSE_HELD","Button","mapStateToProps","state","beads","brushPosition","activeColor","mouseStatus","mapDispatchToProps","dispatch","xy","status","getBeadHash","x","y","beadSize","snapX","snapY","ConnectedCanvas","constructor","props","intervalId","placeObject","bind","_onMouseMove","snap","mouseUp","mouseDown","checkCollisions","center","right","left","numToRound","multiple","remainder","brush","console","log","Object","assign","e","clientX","clientY","renderGridLines","numXLines","window","innerWidth","numYLines","innerHeight","lines","i","push","render","values","Canvas"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './Canvas.css';\nimport { connect } from 'react-redux';\nimport Bead from './Bead';\nimport Brush from './Brush';\nimport { placeBead, setBrushPosition, undo, redo, setMouseStatus } from '../actions/rootActions';\nimport GridLine from './GridLine';\nimport { MOUSE_HELD } from '../constants/constants';\nimport Button from 'react-bootstrap/Button';\n\n\nfunction mapStateToProps(state) {\n  return {\n    beads: state.beads,\n    brushPosition: state.brushPosition,\n    activeColor: state.activeColor,\n    mouseStatus: state.mouseStatus\n  };\n};\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    placeBead: (beads) => dispatch(placeBead(beads)),\n    setBrushPosition: (xy) => dispatch(setBrushPosition(xy)),\n    undo: () => dispatch(undo()),\n    redo: () => dispatch(redo()),\n    setMouseStatus: (status) => dispatch(setMouseStatus(status))\n  }\n}\n\nfunction getBeadHash(x, y) {\n  return x + \" \" + y;\n}\n\n\nconst beadSize = 20;\nconst snapX = beadSize / 2;\nconst snapY = beadSize;\n\nclass ConnectedCanvas extends Component {\n\n  constructor(props) {\n    super(props);\n    this.intervalId = 0;\n    this.placeObject = this.placeObject.bind(this);\n    this._onMouseMove = this._onMouseMove.bind(this);\n    this.snap = this.snap.bind(this);\n    this.mouseUp = this.mouseUp.bind(this);\n    this.mouseDown = this.mouseDown.bind(this);\n  }\n\n  checkCollisions(x, y, snapX, snapY) {\n    const beads = this.props.beads;\n    const center = beads[getBeadHash(x, y)];\n    // const topLeft = beads[getBeadHash(x-snapX, y-snapY)];\n    // const top = beads[getBeadHash(x, y-snapY)];\n    // const topRight = beads[getBeadHash(x+snapX, y-snapY)];\n    const right = beads[getBeadHash(x + snapX, y)];\n    // const bottomRight = beads[getBeadHash(x+snapX, y+snapY)];\n    // const bottom = beads[getBeadHash(x, y+snapY)];\n    // const botomLeft = beads[getBeadHash(x-snapX, y+snapY)];\n    const left = beads[getBeadHash(x - snapX, y)];\n    return center || left || right;\n    // topLeft || top || topRight || right || bottomRight || bottomRight || botomLeft || left || bottom;\n  }\n\n  snap(numToRound, multiple) {\n    if (multiple === 0)\n      return numToRound;\n\n    var remainder = numToRound % multiple;\n    if (remainder === 0)\n      return numToRound;\n\n    return numToRound + multiple - remainder;\n  }\n\n  brush() {\n    var x = this.props.brushPosition.x;\n    var y = this.props.brushPosition.y;\n    return (\n      <Brush\n        x={x}\n        y={y}\n        width={beadSize}\n        height={beadSize}\n        color={this.props.activeColor}\n      />\n    );\n  }\n\n  mouseDown() {\n    // this.setState({mouseHeld: true});\n    console.log(\"mouseDown\");\n    this.props.setMouseStatus(MOUSE_HELD);\n  }\n\n  mouseUp() {\n    console.log(\"mouseUp\");\n    this.props.setMouseStatus(\"\");\n    // this.setState({mouseHeld: false});\n\n  }\n\n  placeObject() {\n\n    let beads = Object.assign({}, this.props.beads);\n    var x = this.props.brushPosition.x;\n    var y = this.props.brushPosition.y;\n    if (!this.checkCollisions(x, y, snapX, snapY)) {\n      beads[getBeadHash(x, y)] = (\n        <Bead\n          x={x}\n          y={y}\n          width={beadSize}\n          height={beadSize}\n          color={this.props.activeColor}\n        />\n      );\n      this.props.placeBead(beads);\n    }\n\n  }\n\n  _onMouseMove(e) {\n    var x = e.clientX - beadSize;\n    var y = e.clientY - beadSize;\n\n    x = this.snap(x, beadSize / 2);\n    y = this.snap(y, beadSize);\n    this.props.setBrushPosition({ x: x, y: y });\n    console.log(this.props.mouseStatus);\n    if (this.props.mouseStatus == MOUSE_HELD) {\n      this.placeObject();\n    }\n  }\n\n  renderGridLines() {\n    var numXLines = window.innerWidth / snapX;\n    var numYLines = window.innerHeight / snapY;\n    var lines = [];\n    for (var i = 1; i < numXLines; i++) {\n      var x = i * snapX;\n      lines.push(\n        <GridLine x={x} color={\"#4E4E4E\"} height={\"100%\"} width={1} />\n      )\n    }\n    for (var i = .5; i < numYLines; i++) {\n      var y = i * snapY;\n      lines.push(\n        <GridLine y={y} color={\"#4E4E4E\"} height={1} width={\"100%\"} />\n      )\n    }\n    return lines;\n  }\n\n\n\n  render() {\n    return (\n      <>\n        <div\n          className=\"Canvas\" id=\"canvas\"\n          onMouseMove={this._onMouseMove}\n          onMouseDown={this.mouseDown}\n          onMouseUp={this.mouseUp}\n          onClick={this.placeObject}\n        >\n          {this.renderGridLines()}\n          {Object.values(this.props.beads)}\n          {this.brush()}\n        </div>\n        <Button onClick={this.props.undo} variant=\"light\">Undo</Button>\n        <Button onClick={this.props.redo}>Redo</Button>\n      </>\n    );\n  }\n\n}\nconst Canvas = connect(mapStateToProps, mapDispatchToProps)(ConnectedCanvas);\n\nexport default Canvas;\n"]},"metadata":{},"sourceType":"module"}