{"ast":null,"code":"import Shape from './shape';\n\nclass Rect extends Shape {\n  constructor(options) {\n    super(options);\n    this.startPoint = [Number(options.startPoint[0].toFixed(this.freeDraw.fix)), Number(options.startPoint[1].toFixed(this.freeDraw.fix))];\n    this.width = Number(options.width.toFixed(this.freeDraw.fix));\n    this.height = Number(options.height.toFixed(this.freeDraw.fix)); // use for roll back data when cancel editing\n\n    this.startPointBackup = [];\n    this.widthBackup = null;\n    this.heightBackup = null;\n    this.pointsBackup = [];\n\n    this._initRect();\n  }\n\n  _initRect() {\n    this._initShape();\n\n    if (this.startPoint.length > 0 && this.width && this.height) {\n      this._draw();\n\n      this._backupData();\n    }\n  }\n\n  _draw() {\n    this._generateHandlePointsByPoints();\n\n    this.shape = this._drawRect();\n\n    if (this.edit) {\n      this._drawRectHandlePoints();\n    }\n  }\n  /**\n   * Generate handlepoints by rect points\n   *\n   * @memberof Rect\n   */\n\n\n  _generateHandlePointsByPoints() {\n    const _this$getZoomAndMove = this.getZoomAndMove(),\n          startPoint = _this$getZoomAndMove.startPoint,\n          width = _this$getZoomAndMove.width,\n          height = _this$getZoomAndMove.height;\n\n    this.handlePoints[0] = {\n      obj: null,\n      point: startPoint\n    };\n    this.handlePoints[1] = {\n      obj: null,\n      point: [startPoint[0] + width, startPoint[1]]\n    };\n    this.handlePoints[2] = {\n      obj: null,\n      point: [startPoint[0] + width, startPoint[1] + height]\n    };\n    this.handlePoints[3] = {\n      obj: null,\n      point: [startPoint[0], startPoint[1] + height]\n    };\n  }\n\n  _drawRectHandlePoints() {\n    for (let i = 0; i < this.handlePoints.length; i++) {\n      this.handlePoints[i].obj = this._drawRectPoint(this.handlePoints[i].point[0], this.handlePoints[i].point[1], this.handlePointStyle.width, {\n        lineWidth: this.handlePointStyle.lineWidth,\n        fillStyle: this.handlePointStyle.fillStyle,\n        strokeStyle: this.handlePointStyle.strokeStyle\n      });\n    }\n  }\n\n  _drawRect() {\n    const _this$getZoomAndMove2 = this.getZoomAndMove(),\n          startPoint = _this$getZoomAndMove2.startPoint,\n          width = _this$getZoomAndMove2.width,\n          height = _this$getZoomAndMove2.height;\n\n    const newRect = new Path2D();\n    newRect.rect(startPoint[0], startPoint[1], width, height);\n\n    this.freeDraw._updateCtxStyle(this.shapeStyle);\n\n    this.freeDraw.ctx.fill(newRect);\n    this.freeDraw.ctx.stroke(newRect);\n    return newRect;\n  }\n\n  _handleMouseMove(event) {\n    const x = event.offsetX,\n          y = event.offsetY;\n\n    if (this.clickedHandlePoint) {\n      const basePoint = this.handlePoints[this.clickedHandlePointIndex].point;\n\n      if (this.clickedHandlePointIndex === 0) {\n        this.width = Number((this.width + (basePoint[0] - x) / this.freeDraw.zoomLevel).toFixed(this.freeDraw.fix));\n        this.height = Number((this.height + (basePoint[1] - y) / this.freeDraw.zoomLevel).toFixed(this.freeDraw.fix));\n        this.startPoint = [Number((this.startPoint[0] + (x - basePoint[0]) / this.freeDraw.zoomLevel).toFixed(this.freeDraw.fix)), Number((this.startPoint[1] + (y - basePoint[1]) / this.freeDraw.zoomLevel).toFixed(this.freeDraw.fix))];\n      } else if (this.clickedHandlePointIndex === 1) {\n        this.width = Number((this.width + (x - basePoint[0]) / this.freeDraw.zoomLevel).toFixed(this.freeDraw.fix));\n        this.height = Number((this.height + (basePoint[1] - y) / this.freeDraw.zoomLevel).toFixed(this.freeDraw.fix));\n        this.startPoint[1] = Number((this.startPoint[1] + (y - basePoint[1]) / this.freeDraw.zoomLevel).toFixed(this.freeDraw.fix));\n      } else if (this.clickedHandlePointIndex === 2) {\n        this.width = Number((this.width + (x - basePoint[0]) / this.freeDraw.zoomLevel).toFixed(this.freeDraw.fix));\n        this.height = Number((this.height + (y - basePoint[1]) / this.freeDraw.zoomLevel).toFixed(this.freeDraw.fix));\n      } else if (this.clickedHandlePointIndex === 3) {\n        this.width = Number((this.width + (basePoint[0] - x) / this.freeDraw.zoomLevel).toFixed(this.freeDraw.fix));\n        this.height = Number((this.height + (y - basePoint[1]) / this.freeDraw.zoomLevel).toFixed(this.freeDraw.fix));\n        this.startPoint[0] = Number((this.startPoint[0] + (x - basePoint[0]) / this.freeDraw.zoomLevel).toFixed(this.freeDraw.fix));\n      }\n\n      if (this.freeDraw.eventsReceive.includes('transform')) {\n        this.freeDraw.eventsCallBack(event, this.id, 'transform');\n      }\n\n      this.freeDraw._refreshShapesInCanvas();\n    } else if (this.clickedShape) {\n      this.startPoint = [Number((this.startPoint[0] + (x - this.clickedShapePoint[0]) / this.freeDraw.zoomLevel).toFixed(this.freeDraw.fix)), Number((this.startPoint[1] + (y - this.clickedShapePoint[1]) / this.freeDraw.zoomLevel).toFixed(this.freeDraw.fix))];\n      this.clickedShapePoint = [x, y];\n\n      if (this.freeDraw.eventsReceive.includes('drag')) {\n        this.freeDraw.eventsCallBack(event, this.id, 'drag');\n      }\n\n      this.freeDraw._refreshShapesInCanvas();\n    }\n  }\n\n  getZoomAndMove() {\n    let width = this.width;\n    let height = this.height;\n    width = this.width * this.freeDraw.zoomLevel;\n    height = this.height * this.freeDraw.zoomLevel;\n    let x = Number(((this.startPoint[0] - this.freeDraw.transformCenter[0]) * this.freeDraw.zoomLevel + this.freeDraw.transformCenter[0]).toFixed(this.freeDraw.fix));\n    let y = Number(((this.startPoint[1] - this.freeDraw.transformCenter[1]) * this.freeDraw.zoomLevel + this.freeDraw.transformCenter[1]).toFixed(this.freeDraw.fix));\n\n    if (this.freeDraw.offsetLeft !== 0) {\n      x = Number((x + this.freeDraw.offsetLeft).toFixed(this.freeDraw.fix));\n    }\n\n    if (this.freeDraw.offsetTop !== 0) {\n      y = Number((y + this.freeDraw.offsetTop).toFixed(this.freeDraw.fix));\n    }\n\n    return {\n      width,\n      height,\n      startPoint: [x, y]\n    };\n  }\n\n  _toSVGPath() {\n    const fix = this.freeDraw.fix;\n    this.points[0] = [Number(this.startPoint[0].toFixed(fix)), Number(this.startPoint[1].toFixed(fix))];\n    this.points[1] = [Number((this.startPoint[0] + this.width).toFixed(fix)), Number(this.startPoint[1].toFixed(fix))];\n    this.points[2] = [Number((this.startPoint[0] + this.width).toFixed(fix)), Number((this.startPoint[1] + this.height).toFixed(fix))];\n    this.points[3] = [Number(this.startPoint[0].toFixed(fix)), Number((this.startPoint[1] + this.height).toFixed(fix))];\n    this.path = `M${this.points[0].join(',')}L${this.points[1].join(',')}L${this.points[2].join(',')}L${this.points[3].join(',')}Z`;\n    this.SVGPath = `<path d=\"${this.path}\" />`;\n  }\n\n  _backupData() {\n    this.startPointBackup = JSON.parse(JSON.stringify(this.startPoint));\n    this.widthBackup = this.width;\n    this.heightBackup = this.height;\n    this.pointsBackup = JSON.parse(JSON.stringify(this.points));\n  }\n\n  _rollbackData() {\n    this.startPoint = JSON.parse(JSON.stringify(this.startPointBackup));\n    this.width = this.widthBackup;\n    this.height = this.heightBackup;\n    this.points = JSON.parse(JSON.stringify(this.pointsBackup));\n  }\n\n  getHandlePointCoordinate(handlePointIndex) {\n    if (this.handlePoints[handlePointIndex]) {\n      return this.handlePoints[handlePointIndex].point;\n    }\n\n    return null;\n  }\n\n}\n\nexport default Rect;","map":{"version":3,"sources":["/home/george/projects/beads/beads/node_modules/free-draw/src/rect.js"],"names":["Shape","Rect","constructor","options","startPoint","Number","toFixed","freeDraw","fix","width","height","startPointBackup","widthBackup","heightBackup","pointsBackup","_initRect","_initShape","length","_draw","_backupData","_generateHandlePointsByPoints","shape","_drawRect","edit","_drawRectHandlePoints","getZoomAndMove","handlePoints","obj","point","i","_drawRectPoint","handlePointStyle","lineWidth","fillStyle","strokeStyle","newRect","Path2D","rect","_updateCtxStyle","shapeStyle","ctx","fill","stroke","_handleMouseMove","event","x","offsetX","y","offsetY","clickedHandlePoint","basePoint","clickedHandlePointIndex","zoomLevel","eventsReceive","includes","eventsCallBack","id","_refreshShapesInCanvas","clickedShape","clickedShapePoint","transformCenter","offsetLeft","offsetTop","_toSVGPath","points","path","join","SVGPath","JSON","parse","stringify","_rollbackData","getHandlePointCoordinate","handlePointIndex"],"mappings":"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","sourcesContent":["import Shape from './shape'\n\nclass Rect extends Shape {\n  constructor (options) {\n    super(options)\n\n    this.startPoint = [Number(options.startPoint[0].toFixed(this.freeDraw.fix)), Number(options.startPoint[1].toFixed(this.freeDraw.fix))]\n    this.width = Number(options.width.toFixed(this.freeDraw.fix))\n    this.height = Number(options.height.toFixed(this.freeDraw.fix))\n\n    // use for roll back data when cancel editing\n    this.startPointBackup = []\n    this.widthBackup = null\n    this.heightBackup = null\n    this.pointsBackup = []\n\n    this._initRect()\n  }\n\n  _initRect () {\n    this._initShape()\n    if (this.startPoint.length > 0 && this.width && this.height) {\n      this._draw()\n      this._backupData()\n    }\n  }\n\n  _draw () {\n    this._generateHandlePointsByPoints()\n    this.shape = this._drawRect()\n    if (this.edit) {\n      this._drawRectHandlePoints()\n    }\n  }\n\n  /**\n   * Generate handlepoints by rect points\n   *\n   * @memberof Rect\n   */\n  _generateHandlePointsByPoints () {\n    const { startPoint, width, height } = this.getZoomAndMove()\n    this.handlePoints[0] = { obj: null, point: startPoint }\n    this.handlePoints[1] = { obj: null, point: [startPoint[0] + width, startPoint[1]] }\n    this.handlePoints[2] = { obj: null, point: [startPoint[0] + width, startPoint[1] + height] }\n    this.handlePoints[3] = { obj: null, point: [startPoint[0], startPoint[1] + height] }\n  }\n\n  _drawRectHandlePoints () {\n    for (let i = 0; i < this.handlePoints.length; i++) {\n      this.handlePoints[i].obj = this._drawRectPoint(\n        this.handlePoints[i].point[0],\n        this.handlePoints[i].point[1],\n        this.handlePointStyle.width,\n        {\n          lineWidth: this.handlePointStyle.lineWidth,\n          fillStyle: this.handlePointStyle.fillStyle,\n          strokeStyle: this.handlePointStyle.strokeStyle\n        }\n      )\n    }\n  }\n\n  _drawRect () {\n    const { startPoint, width, height } = this.getZoomAndMove()\n    const newRect = new Path2D()\n    newRect.rect(startPoint[0], startPoint[1], width, height)\n    this.freeDraw._updateCtxStyle(this.shapeStyle)\n    this.freeDraw.ctx.fill(newRect)\n    this.freeDraw.ctx.stroke(newRect)\n    return newRect\n  }\n\n  _handleMouseMove (event) {\n    const { offsetX: x, offsetY: y } = event\n    if (this.clickedHandlePoint) {\n      const basePoint = this.handlePoints[this.clickedHandlePointIndex].point\n      if (this.clickedHandlePointIndex === 0) {\n        this.width = Number((this.width + (basePoint[0] - x) / this.freeDraw.zoomLevel).toFixed(this.freeDraw.fix))\n        this.height = Number((this.height + (basePoint[1] - y) / this.freeDraw.zoomLevel).toFixed(this.freeDraw.fix))\n        this.startPoint = [\n          Number((this.startPoint[0] + (x - basePoint[0]) / this.freeDraw.zoomLevel).toFixed(this.freeDraw.fix)),\n          Number((this.startPoint[1] + (y - basePoint[1]) / this.freeDraw.zoomLevel).toFixed(this.freeDraw.fix))\n        ]\n      } else if (this.clickedHandlePointIndex === 1) {\n        this.width = Number((this.width + (x - basePoint[0]) / this.freeDraw.zoomLevel).toFixed(this.freeDraw.fix))\n        this.height = Number((this.height + (basePoint[1] - y) / this.freeDraw.zoomLevel).toFixed(this.freeDraw.fix))\n        this.startPoint[1] = Number((this.startPoint[1] + (y - basePoint[1]) / this.freeDraw.zoomLevel).toFixed(this.freeDraw.fix))\n      } else if (this.clickedHandlePointIndex === 2) {\n        this.width = Number((this.width + (x - basePoint[0]) / this.freeDraw.zoomLevel).toFixed(this.freeDraw.fix))\n        this.height = Number((this.height + (y - basePoint[1]) / this.freeDraw.zoomLevel).toFixed(this.freeDraw.fix))\n      } else if (this.clickedHandlePointIndex === 3) {\n        this.width = Number((this.width + (basePoint[0] - x) / this.freeDraw.zoomLevel).toFixed(this.freeDraw.fix))\n        this.height = Number((this.height + (y - basePoint[1]) / this.freeDraw.zoomLevel).toFixed(this.freeDraw.fix))\n        this.startPoint[0] = Number((this.startPoint[0] + (x - basePoint[0]) / this.freeDraw.zoomLevel).toFixed(this.freeDraw.fix))\n      }\n      if (this.freeDraw.eventsReceive.includes('transform')) {\n        this.freeDraw.eventsCallBack(event, this.id, 'transform')\n      }\n      this.freeDraw._refreshShapesInCanvas()\n    } else if (this.clickedShape) {\n      this.startPoint = [\n        Number((this.startPoint[0] + (x - this.clickedShapePoint[0]) / this.freeDraw.zoomLevel).toFixed(this.freeDraw.fix)),\n        Number((this.startPoint[1] + (y - this.clickedShapePoint[1]) / this.freeDraw.zoomLevel).toFixed(this.freeDraw.fix))\n      ]\n      this.clickedShapePoint = [x, y]\n      if (this.freeDraw.eventsReceive.includes('drag')) {\n        this.freeDraw.eventsCallBack(event, this.id, 'drag')\n      }\n      this.freeDraw._refreshShapesInCanvas()\n    }\n  }\n\n  getZoomAndMove () {\n    let width = this.width\n    let height = this.height\n    width = this.width * this.freeDraw.zoomLevel\n    height = this.height * this.freeDraw.zoomLevel\n    let x = Number(((this.startPoint[0] - this.freeDraw.transformCenter[0]) * this.freeDraw.zoomLevel + this.freeDraw.transformCenter[0]).toFixed(this.freeDraw.fix))\n    let y = Number(((this.startPoint[1] - this.freeDraw.transformCenter[1]) * this.freeDraw.zoomLevel + this.freeDraw.transformCenter[1]).toFixed(this.freeDraw.fix))\n    if (this.freeDraw.offsetLeft !== 0) {\n      x = Number((x + this.freeDraw.offsetLeft).toFixed(this.freeDraw.fix))\n    }\n    if (this.freeDraw.offsetTop !== 0) {\n      y = Number((y + this.freeDraw.offsetTop).toFixed(this.freeDraw.fix))\n    }\n    return {\n      width,\n      height,\n      startPoint: [x, y]\n    }\n  }\n  \n  _toSVGPath () {\n    const fix = this.freeDraw.fix\n    this.points[0] = [Number(this.startPoint[0].toFixed(fix)), Number(this.startPoint[1].toFixed(fix))]\n    this.points[1] = [Number((this.startPoint[0] + this.width).toFixed(fix)), Number(this.startPoint[1].toFixed(fix))]\n    this.points[2] = [Number((this.startPoint[0] + this.width).toFixed(fix)), Number((this.startPoint[1] + this.height).toFixed(fix))]\n    this.points[3] = [Number((this.startPoint[0]).toFixed(fix)), Number((this.startPoint[1] + this.height).toFixed(fix))]\n    this.path = `M${this.points[0].join(',')}L${this.points[1].join(',')}L${this.points[2].join(',')}L${this.points[3].join(',')}Z`\n    this.SVGPath = `<path d=\"${this.path}\" />`\n  }\n\n  _backupData () {\n    this.startPointBackup = JSON.parse(JSON.stringify(this.startPoint))\n    this.widthBackup = this.width\n    this.heightBackup = this.height\n    this.pointsBackup = JSON.parse(JSON.stringify(this.points))\n  }\n\n  _rollbackData () {\n    this.startPoint = JSON.parse(JSON.stringify(this.startPointBackup))\n    this.width = this.widthBackup\n    this.height = this.heightBackup\n    this.points = JSON.parse(JSON.stringify(this.pointsBackup))\n  }\n\n  getHandlePointCoordinate (handlePointIndex) {\n    if (this.handlePoints[handlePointIndex]) {\n      return this.handlePoints[handlePointIndex].point\n    }\n    return null\n  }\n}\n\nexport default Rect\n"]},"metadata":{},"sourceType":"module"}