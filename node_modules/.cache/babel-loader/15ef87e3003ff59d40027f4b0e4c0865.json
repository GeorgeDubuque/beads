{"ast":null,"code":"var _jsxFileName = \"/home/george/projects/beads/beads/src/components/Canvas.js\";\nimport React, { Component } from 'react';\nimport './Canvas.css';\nimport { connect } from 'react-redux';\nimport Bead from './Bead';\nimport Brush from './Brush';\nimport { placeBead, setBrushPosition, undo, redo, setMouseStatus } from '../actions/rootActions';\nimport GridLine from './GridLine';\nimport { MOUSE_HELD } from '../constants/constants';\n\nfunction mapStateToProps(state) {\n  return {\n    beads: state.beads,\n    brushPosition: state.brushPosition,\n    activeColor: state.activeColor,\n    mouseHeld: state.mouseHeld\n  };\n}\n\n;\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    placeBead: beads => dispatch(placeBead(beads)),\n    setBrushPosition: xy => dispatch(setBrushPosition(xy)),\n    undo: () => dispatch(undo()),\n    redo: () => dispatch(redo()),\n    setMouseStatus: status => dispatch(setMouseStatus(status))\n  };\n}\n\nfunction getBeadHash(x, y) {\n  return x + \" \" + y;\n}\n\nconst beadSize = 20;\nconst snapX = beadSize / 2;\nconst snapY = beadSize;\n\nclass ConnectedCanvas extends Component {\n  constructor(props) {\n    super(props);\n    this.intervalId = 0;\n    this.state = {\n      mouseHeld: false\n    };\n    this.placeObject = this.placeObject.bind(this);\n    this._onMouseMove = this._onMouseMove.bind(this);\n    this.snap = this.snap.bind(this);\n    this.mouseUp = this.mouseUp.bind(this);\n    this.mouseDown = this.mouseDown.bind(this);\n  }\n\n  checkCollisions(x, y, snapX, snapY) {\n    const beads = this.props.beads;\n    const center = beads[getBeadHash(x, y)]; // const topLeft = beads[getBeadHash(x-snapX, y-snapY)];\n    // const top = beads[getBeadHash(x, y-snapY)];\n    // const topRight = beads[getBeadHash(x+snapX, y-snapY)];\n\n    const right = beads[getBeadHash(x + snapX, y)]; // const bottomRight = beads[getBeadHash(x+snapX, y+snapY)];\n    // const bottom = beads[getBeadHash(x, y+snapY)];\n    // const botomLeft = beads[getBeadHash(x-snapX, y+snapY)];\n\n    const left = beads[getBeadHash(x - snapX, y)];\n    return center || left || right; // topLeft || top || topRight || right || bottomRight || bottomRight || botomLeft || left || bottom;\n  }\n\n  snap(numToRound, multiple) {\n    if (multiple === 0) return numToRound;\n    var remainder = numToRound % multiple;\n    if (remainder === 0) return numToRound;\n    return numToRound + multiple - remainder;\n  }\n\n  brush() {\n    var x = this.props.brushPosition.x;\n    var y = this.props.brushPosition.y;\n    return React.createElement(Brush, {\n      x: x,\n      y: y,\n      width: beadSize,\n      height: beadSize,\n      color: this.props.activeColor,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    });\n  }\n\n  mouseDown() {\n    // this.setState({mouseHeld: true});\n    this.props.setMouseStatus(MOUSE_HELD);\n  }\n\n  mouseUp() {\n    this.props.setMouseStatus(\"\"); // this.setState({mouseHeld: false});\n  }\n\n  placeObject() {\n    let beads = Object.assign({}, this.props.beads);\n    var x = this.props.brushPosition.x;\n    var y = this.props.brushPosition.y;\n\n    if (!this.checkCollisions(x, y, snapX, snapY)) {\n      beads[getBeadHash(x, y)] = React.createElement(Bead, {\n        x: x,\n        y: y,\n        width: beadSize,\n        height: beadSize,\n        color: this.props.activeColor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      });\n      this.props.placeBead(beads);\n    }\n  }\n\n  _onMouseMove(e) {\n    var x = e.clientX - beadSize;\n    var y = e.clientY - beadSize;\n    x = this.snap(x, beadSize / 2);\n    y = this.snap(y, beadSize);\n    this.props.setBrushPosition({\n      x: x,\n      y: y\n    });\n\n    if (this.props.mouseHeld == MOUSE_HELD) {\n      this.placeObject();\n    }\n  }\n\n  renderGridLines() {\n    var numXLines = window.innerWidth / snapX;\n    var numYLines = window.innerHeight / snapY;\n    var lines = [];\n\n    for (var i = 1; i < numXLines; i++) {\n      var x = i * snapX;\n      lines.push(React.createElement(GridLine, {\n        x: x,\n        color: \"#BEBEBE\",\n        height: \"100%\",\n        width: 1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }));\n    }\n\n    for (var i = .5; i < numYLines; i++) {\n      var y = i * snapY;\n      lines.push(React.createElement(GridLine, {\n        y: y,\n        color: \"#BEBEBE\",\n        height: 1,\n        width: \"100%\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }));\n    }\n\n    return lines;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"Wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"Canvas\",\n      id: \"canvas\",\n      onMouseMove: this._onMouseMove,\n      onMouseDown: this.mouseDown,\n      onMouseUp: this.mouseUp,\n      onClick: this.placeObject,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, this.renderGridLines(), Object.values(this.props.beads), this.brush()), React.createElement(\"button\", {\n      onClick: this.props.undo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, \"Undo\"), React.createElement(\"button\", {\n      onClick: this.props.redo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, \"Redo\"));\n  }\n\n}\n\nconst Canvas = connect(mapStateToProps, mapDispatchToProps)(ConnectedCanvas);\nexport default Canvas;","map":{"version":3,"sources":["/home/george/projects/beads/beads/src/components/Canvas.js"],"names":["React","Component","connect","Bead","Brush","placeBead","setBrushPosition","undo","redo","setMouseStatus","GridLine","MOUSE_HELD","mapStateToProps","state","beads","brushPosition","activeColor","mouseHeld","mapDispatchToProps","dispatch","xy","status","getBeadHash","x","y","beadSize","snapX","snapY","ConnectedCanvas","constructor","props","intervalId","placeObject","bind","_onMouseMove","snap","mouseUp","mouseDown","checkCollisions","center","right","left","numToRound","multiple","remainder","brush","Object","assign","e","clientX","clientY","renderGridLines","numXLines","window","innerWidth","numYLines","innerHeight","lines","i","push","render","values","Canvas"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './Canvas.css';\nimport {connect} from 'react-redux';\nimport Bead from './Bead';\nimport Brush from './Brush';\nimport { placeBead, setBrushPosition, undo, redo, setMouseStatus } from '../actions/rootActions';\nimport GridLine from './GridLine';\nimport { MOUSE_HELD } from '../constants/constants';\n\n\nfunction mapStateToProps(state) {\n  return {\n      beads: state.beads,\n      brushPosition: state.brushPosition,\n      activeColor: state.activeColor,\n      mouseHeld: state.mouseHeld\n  };\n};\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n      placeBead: (beads) => dispatch(placeBead(beads)),\n      setBrushPosition: (xy) => dispatch(setBrushPosition(xy)),\n      undo: () => dispatch(undo()),\n      redo: () => dispatch(redo()),\n      setMouseStatus: (status) => dispatch(setMouseStatus(status))\n  }\n}\n\nfunction getBeadHash(x, y){\n  return x + \" \" + y;\n}\n\n\nconst beadSize = 20;\nconst snapX = beadSize/2;\nconst snapY = beadSize;\n\nclass ConnectedCanvas extends Component {\n\n  constructor(props) {\n    super(props);\n    this.intervalId = 0;\n    this.state = { mouseHeld: false };\n    this.placeObject = this.placeObject.bind(this);\n    this._onMouseMove = this._onMouseMove.bind(this);\n    this.snap = this.snap.bind(this);\n    this.mouseUp = this.mouseUp.bind(this);\n    this.mouseDown = this.mouseDown.bind(this);\n  }\n\n  checkCollisions(x, y, snapX, snapY){\n    const beads = this.props.beads;\n    const center = beads[getBeadHash(x, y)];\n    // const topLeft = beads[getBeadHash(x-snapX, y-snapY)];\n    // const top = beads[getBeadHash(x, y-snapY)];\n    // const topRight = beads[getBeadHash(x+snapX, y-snapY)];\n    const right = beads[getBeadHash(x+snapX, y)];\n    // const bottomRight = beads[getBeadHash(x+snapX, y+snapY)];\n    // const bottom = beads[getBeadHash(x, y+snapY)];\n    // const botomLeft = beads[getBeadHash(x-snapX, y+snapY)];\n    const left = beads[getBeadHash(x-snapX, y)];\n    return center || left || right;\n    // topLeft || top || topRight || right || bottomRight || bottomRight || botomLeft || left || bottom;\n  }\n\n  snap(numToRound, multiple)\n  {\n    if (multiple === 0)\n        return numToRound;\n\n    var remainder = numToRound % multiple;\n    if (remainder === 0)\n        return numToRound;\n\n    return numToRound + multiple - remainder;\n  }\n\n  brush(){\n    var x = this.props.brushPosition.x;\n    var y = this.props.brushPosition.y;\n    return (\n      <Brush \n        x={x} \n        y={y} \n        width={beadSize}\n        height={beadSize}\n        color={this.props.activeColor}\n      />\n    );\n  }\n\n  mouseDown(){\n    // this.setState({mouseHeld: true});\n    this.props.setMouseStatus(MOUSE_HELD);\n  }\n\n  mouseUp(){\n    this.props.setMouseStatus(\"\");\n    // this.setState({mouseHeld: false});\n\n  }\n\n  placeObject(){\n\n    let beads = Object.assign({}, this.props.beads);\n    var x = this.props.brushPosition.x;\n    var y = this.props.brushPosition.y;\n    if(!this.checkCollisions(x, y, snapX, snapY)){\n      beads[getBeadHash(x, y)] = (\n        <Bead \n          x={x} \n          y={y} \n          width={beadSize} \n          height={beadSize} \n          color={this.props.activeColor}\n        />\n      );\n      this.props.placeBead(beads);\n    }\n    \n  }\n\n  _onMouseMove(e) {\n    var x = e.clientX - beadSize;\n    var y = e.clientY - beadSize;\n\n    x = this.snap(x, beadSize/2);\n    y = this.snap(y, beadSize);\n    this.props.setBrushPosition({ x: x, y: y });\n    if(this.props.mouseHeld == MOUSE_HELD){\n      this.placeObject();\n    }\n  }\n\n  renderGridLines(){\n    var numXLines = window.innerWidth /snapX;\n    var numYLines = window.innerHeight/snapY;\n    var lines = [];\n    for (var i = 1; i < numXLines; i++){\n      var x = i * snapX;\n      lines.push(\n        <GridLine  x={x} color={\"#BEBEBE\"} height={\"100%\"} width={1}/>\n      )\n    }\n    for (var i = .5; i < numYLines; i++){\n      var y = i * snapY;\n      lines.push(\n        <GridLine  y={y} color={\"#BEBEBE\"} height={1} width={\"100%\"}/>\n      )\n    }\n    return lines;\n  }\n\n  \n\n  render(){\n    return (\n      <div className=\"Wrapper\">\n        <div \n          className=\"Canvas\" id=\"canvas\"\n          onMouseMove={this._onMouseMove} \n          onMouseDown={this.mouseDown}\n          onMouseUp={this.mouseUp}\n          onClick={this.placeObject}\n        >\n          {this.renderGridLines()}\n          {Object.values(this.props.beads)}\n          {this.brush()}\n        </div>\n        <button onClick={this.props.undo}>Undo</button>\n        <button onClick={this.props.redo}>Redo</button>\n      </div>\n      \n    );\n  }\n  \n}\nconst Canvas = connect(mapStateToProps, mapDispatchToProps)(ConnectedCanvas);\n\nexport default Canvas;\n"]},"metadata":{},"sourceType":"module"}