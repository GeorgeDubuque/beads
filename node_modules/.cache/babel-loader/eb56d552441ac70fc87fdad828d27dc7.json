{"ast":null,"code":"import { HANDLE_POINT_STYLE, EDIT_SHAPE_STYLE, SHAPE_STYLE } from './config';\n\nclass Shape {\n  constructor(options) {\n    // Shape id\n    this.id = options.id; // Shape type rect/polygon\n\n    this.type = options.type; // Shape edit status, if current shape is editing\n\n    this.edit = options.edit || true; // Shape points\n\n    this.points = options.points || [];\n    this.temporaryPoints = [];\n    this.temporaryPointsWithoutZoomAndOffset = []; // Shape path\n\n    this.path = options.path || '';\n    this.SVGPath = ''; // Shape handle points\n\n    this.handlePoints = []; // Record index if handlepoint clicked\n\n    this.clickedHandlePointIndex = null;\n    this.clickedShape = false;\n    this.clickedShapePoint = [];\n    this.clickedHandlePoint = false; // FreeDraw instance reference\n\n    this.freeDraw = options.freeDraw; // Handle points style\n\n    this.handlePointStyle = options.handlePointStyle; // Shape style\n\n    this.shapeStyle = options.shapeStyle; // Shape Object, Path/Rect\n\n    this.shape = null;\n    this.clickTime = null;\n  }\n  /**\n   * Initialize the shape configuration\n   *\n   * @memberof Shape\n   */\n\n\n  _initShape() {\n    // Set default style for shaape\n    if (!this.handlePointStyle) {\n      this.handlePointStyle = HANDLE_POINT_STYLE;\n    }\n\n    if (!this.shapeStyle) {\n      this.shapeStyle = EDIT_SHAPE_STYLE;\n    }\n  }\n  /**\n   * Handle events\n   *\n   * @param {Object} event\n   * @memberof Shape\n   */\n\n\n  _trigger(event) {\n    const type = event.type;\n\n    switch (type) {\n      case 'mousedown':\n        if (this._handleMouseDown && typeof this._handleMouseDown === 'function') {\n          this._handleMouseDown(event);\n        }\n\n        break;\n\n      case 'mousemove':\n        if (this._handleMouseMove && typeof this._handleMouseMove === 'function') {\n          this._handleMouseMove(event);\n        }\n\n        break;\n\n      case 'mouseup':\n        if (this._handleMouseUp && typeof this._handleMouseUp === 'function') {\n          this._handleMouseUp(event);\n        }\n\n        break;\n\n      case 'keydown':\n        if (this._handleKeydown && typeof this._handleKeydown === 'function') {\n          this._handleKeydown(event);\n        }\n\n        break;\n    }\n  }\n  /**\n   * Draw Rect Point\n   *\n   * @param {Number} x\n   * @param {Number} y\n   * @param {Number} length\n   * @param {Object} style\n   * @returns\n   * @memberof Shape\n   */\n\n\n  _drawRectPoint(x, y, length, style) {\n    const handlePoint = new Path2D();\n    handlePoint.rect(x - length / 2, y - length / 2, length, length);\n\n    this.freeDraw._updateCtxStyle(style);\n\n    this.freeDraw.ctx.fill(handlePoint);\n    this.freeDraw.ctx.stroke(handlePoint);\n    return handlePoint;\n  }\n  /**\n   * Draw line\n   * @param {*} startPoint \n   * @param {*} endPoint \n   */\n\n\n  _drawLine(startPoint, endPoint, style) {\n    const path = `M${startPoint[0]},${startPoint[1]}L${endPoint[0]},${endPoint[1]}`;\n    const newPath = new Path2D(path);\n\n    this.freeDraw._updateCtxStyle(style);\n\n    this.freeDraw.ctx.fill(newPath);\n    this.freeDraw.ctx.stroke(newPath);\n    return newPath;\n  }\n  /**\n   * Draw Circle Point\n   *\n   * @param {Number} x\n   * @param {Number} y\n   * @param {Number} radius\n   * @param {Object} style\n   * @returns\n   * @memberof Shape\n   */\n\n\n  _drawCirclePoint(x, y, radius, style) {\n    const handlePoint = new Path2D();\n    handlePoint.arc(x, y, radius, 0, 2 * Math.PI, false);\n\n    this.freeDraw._updateCtxStyle(style);\n\n    this.freeDraw.ctx.fill(handlePoint);\n    this.freeDraw.ctx.stroke(handlePoint);\n    return handlePoint;\n  }\n\n  _includes(x, y) {\n    return this._pointInHandlePoints(x, y) || this._pointInShape(x, y);\n  }\n\n  _handleMouseDown(event) {\n    const x = event.offsetX,\n          y = event.offsetY;\n\n    if (this._pointInHandlePoints(x, y)) {\n      this.clickedHandlePoint = true;\n      this.clickedShapePoint = [];\n      this.clickedShape = false;\n\n      if (this.type === 'polygon') {\n        this._polygonMouseDown(event);\n      }\n    } else if (this._pointInShape(x, y)) {\n      this.clickedHandlePoint = false;\n      this.clickedShapePoint = [x, y];\n      this.clickedShape = true;\n    } else if (this.type === 'polygon') {\n      this._polygonMouseDown(event);\n    }\n  }\n\n  _handleMouseUp() {\n    this.clickedShape = false;\n    this.clickedHandlePoint = false;\n    this.clickedShapePoint = [];\n  }\n  /**\n   * Point(x, y) is in shape\n   * @param {Number} x\n   * @param {Number} y\n   * @returns {Boolean}\n   * @memberof Shape\n   */\n\n\n  _pointInShape(x, y) {\n    if (!this.shape) {\n      return false;\n    }\n\n    for (let point of this.temporaryPointsWithoutZoomAndOffset) {\n      if (x === point[0] && y === point[1]) {\n        return false;\n      }\n    }\n\n    return this.freeDraw.ctx.isPointInPath(this.shape, x, y);\n  }\n  /**\n   * Point(x, y) is in handlePoints\n   *\n   * @param {*} x\n   * @param {*} y\n   * @returns {Boolean}\n   * @memberof Shape\n   */\n\n\n  _pointInHandlePoints(x, y) {\n    let result = false;\n\n    if (this.edit) {\n      let clickedHandlePointIndex = null;\n\n      for (let i = 0; i < this.handlePoints.length; i++) {\n        if (this.freeDraw.ctx.isPointInPath(this.handlePoints[i].obj, x, y)) {\n          result = true;\n          clickedHandlePointIndex = i;\n          break;\n        }\n      }\n\n      this.clickedHandlePointIndex = clickedHandlePointIndex;\n    }\n\n    return result;\n  }\n  /**\n   * Use for active shape edit model\n   *\n   * @returns\n   * @memberof Shape\n   */\n\n\n  editShape() {\n    this.shapeStyle = EDIT_SHAPE_STYLE;\n    this.edit = true;\n\n    this.freeDraw._updateModel('edit', this.id);\n\n    this.freeDraw._refreshShapesInCanvas();\n\n    this._backupData();\n\n    return this;\n  }\n  /**\n   * Finish Shape editing model and save\n   *\n   * @returns\n   * @memberof Shape\n   */\n\n\n  finish() {\n    this.edit = false;\n    this.isCreate = false;\n\n    this.freeDraw._updateModel('view');\n\n    this.shapeStyle = SHAPE_STYLE;\n\n    if (this._toSVGPath && typeof this._toSVGPath === 'function') {\n      this._toSVGPath();\n    }\n\n    if (this._toJSONString && typeof this._toJSONString === 'function') {\n      this._toJSONString();\n    }\n\n    this.freeDraw._refreshShapesInCanvas();\n\n    return this;\n  }\n  /**\n   * Cancel Shape editing\n   */\n\n\n  cancelEdit() {\n    this.shapeStyle = SHAPE_STYLE;\n    this.edit = false;\n\n    this.freeDraw._updateModel('view');\n\n    this._rollbackData();\n\n    this.freeDraw._refreshShapesInCanvas();\n\n    return this;\n  }\n\n}\n\nexport default Shape;","map":{"version":3,"sources":["/home/george/projects/beads/beads/node_modules/free-draw/src/shape.js"],"names":["HANDLE_POINT_STYLE","EDIT_SHAPE_STYLE","SHAPE_STYLE","Shape","constructor","options","id","type","edit","points","temporaryPoints","temporaryPointsWithoutZoomAndOffset","path","SVGPath","handlePoints","clickedHandlePointIndex","clickedShape","clickedShapePoint","clickedHandlePoint","freeDraw","handlePointStyle","shapeStyle","shape","clickTime","_initShape","_trigger","event","_handleMouseDown","_handleMouseMove","_handleMouseUp","_handleKeydown","_drawRectPoint","x","y","length","style","handlePoint","Path2D","rect","_updateCtxStyle","ctx","fill","stroke","_drawLine","startPoint","endPoint","newPath","_drawCirclePoint","radius","arc","Math","PI","_includes","_pointInHandlePoints","_pointInShape","offsetX","offsetY","_polygonMouseDown","point","isPointInPath","result","i","obj","editShape","_updateModel","_refreshShapesInCanvas","_backupData","finish","isCreate","_toSVGPath","_toJSONString","cancelEdit","_rollbackData"],"mappings":"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","sourcesContent":["import {\n  HANDLE_POINT_STYLE,\n  EDIT_SHAPE_STYLE,\n  SHAPE_STYLE\n} from './config'\n\nclass Shape {\n  constructor (options) {\n    // Shape id\n    this.id = options.id\n\n    // Shape type rect/polygon\n    this.type = options.type\n\n    // Shape edit status, if current shape is editing\n    this.edit = options.edit || true\n\n    // Shape points\n    this.points = options.points || []\n    this.temporaryPoints = []\n    this.temporaryPointsWithoutZoomAndOffset = []\n\n    // Shape path\n    this.path = options.path || ''\n\n    this.SVGPath = ''\n\n    // Shape handle points\n    this.handlePoints = []\n\n    // Record index if handlepoint clicked\n    this.clickedHandlePointIndex = null\n\n    this.clickedShape = false\n    this.clickedShapePoint = []\n    this.clickedHandlePoint = false\n\n    // FreeDraw instance reference\n    this.freeDraw = options.freeDraw\n\n    // Handle points style\n    this.handlePointStyle = options.handlePointStyle\n\n    // Shape style\n    this.shapeStyle = options.shapeStyle\n\n    // Shape Object, Path/Rect\n    this.shape = null\n\n    this.clickTime = null\n  }\n\n  /**\n   * Initialize the shape configuration\n   *\n   * @memberof Shape\n   */\n  _initShape () {\n    // Set default style for shaape\n    if (!this.handlePointStyle) {\n      this.handlePointStyle = HANDLE_POINT_STYLE\n    }\n    if (!this.shapeStyle) {\n      this.shapeStyle = EDIT_SHAPE_STYLE\n    }\n  }\n\n  /**\n   * Handle events\n   *\n   * @param {Object} event\n   * @memberof Shape\n   */\n  _trigger (event) {\n    const { type } = event\n    switch (type) {\n      case 'mousedown':\n        if (this._handleMouseDown && typeof this._handleMouseDown === 'function') {\n          this._handleMouseDown(event)\n        }\n        break\n      case 'mousemove':\n        if (this._handleMouseMove && typeof this._handleMouseMove === 'function') {\n          this._handleMouseMove(event)\n        }\n        break\n      case 'mouseup':\n        if (this._handleMouseUp && typeof this._handleMouseUp === 'function') {\n          this._handleMouseUp(event)\n        }\n        break\n      case 'keydown':\n        if (this._handleKeydown && typeof this._handleKeydown === 'function') {\n          this._handleKeydown(event)\n        }\n        break\n    }\n  }\n\n  /**\n   * Draw Rect Point\n   *\n   * @param {Number} x\n   * @param {Number} y\n   * @param {Number} length\n   * @param {Object} style\n   * @returns\n   * @memberof Shape\n   */\n  _drawRectPoint (x, y, length, style) {\n    const handlePoint = new Path2D()\n    handlePoint.rect(x - length / 2, y - length / 2, length, length)\n    this.freeDraw._updateCtxStyle(style)\n    this.freeDraw.ctx.fill(handlePoint)\n    this.freeDraw.ctx.stroke(handlePoint)\n    return handlePoint\n  }\n\n  /**\n   * Draw line\n   * @param {*} startPoint \n   * @param {*} endPoint \n   */\n  _drawLine (startPoint, endPoint, style) {\n    const path = `M${startPoint[0]},${startPoint[1]}L${endPoint[0]},${endPoint[1]}`\n    const newPath = new Path2D(path)\n    this.freeDraw._updateCtxStyle(style)\n    this.freeDraw.ctx.fill(newPath)\n    this.freeDraw.ctx.stroke(newPath)\n    return newPath\n  }\n\n  /**\n   * Draw Circle Point\n   *\n   * @param {Number} x\n   * @param {Number} y\n   * @param {Number} radius\n   * @param {Object} style\n   * @returns\n   * @memberof Shape\n   */\n  _drawCirclePoint (x, y, radius, style) {\n    const handlePoint = new Path2D()\n    handlePoint.arc(x, y, radius, 0, 2 * Math.PI, false)\n    this.freeDraw._updateCtxStyle(style)\n    this.freeDraw.ctx.fill(handlePoint)\n    this.freeDraw.ctx.stroke(handlePoint)\n    return handlePoint\n  }\n\n  _includes (x, y) {\n    return this._pointInHandlePoints(x, y) || this._pointInShape(x, y)\n  }\n\n  _handleMouseDown (event) {\n    const { offsetX: x, offsetY: y } = event\n    if (this._pointInHandlePoints(x, y)) {\n      this.clickedHandlePoint = true\n      this.clickedShapePoint = []\n      this.clickedShape = false\n      if (this.type === 'polygon') {\n        this._polygonMouseDown(event)\n      }\n    } else if (this._pointInShape(x, y)) {\n      this.clickedHandlePoint = false\n      this.clickedShapePoint = [x, y]\n      this.clickedShape = true\n    } else if (this.type === 'polygon') {\n      this._polygonMouseDown(event)\n    }\n  }\n\n  _handleMouseUp () {\n    this.clickedShape = false\n    this.clickedHandlePoint = false\n    this.clickedShapePoint = []\n  }\n\n  /**\n   * Point(x, y) is in shape\n   * @param {Number} x\n   * @param {Number} y\n   * @returns {Boolean}\n   * @memberof Shape\n   */\n  _pointInShape (x, y) {\n    if (!this.shape) {\n      return false\n    }\n    for (let point of this.temporaryPointsWithoutZoomAndOffset) {\n      if (x === point[0] && y === point[1]) {\n        return false\n      }\n    }\n    return this.freeDraw.ctx.isPointInPath(this.shape, x, y)\n  }\n\n  /**\n   * Point(x, y) is in handlePoints\n   *\n   * @param {*} x\n   * @param {*} y\n   * @returns {Boolean}\n   * @memberof Shape\n   */\n  _pointInHandlePoints (x, y) {\n    let result = false\n    if (this.edit) {\n      let clickedHandlePointIndex = null\n      for (let i = 0; i < this.handlePoints.length; i++) {\n        if (this.freeDraw.ctx.isPointInPath(this.handlePoints[i].obj, x, y)) {\n          result = true\n          clickedHandlePointIndex = i\n          break\n        }\n      }\n      this.clickedHandlePointIndex = clickedHandlePointIndex\n    }\n    return result\n  }\n\n  /**\n   * Use for active shape edit model\n   *\n   * @returns\n   * @memberof Shape\n   */\n  editShape () {\n    this.shapeStyle = EDIT_SHAPE_STYLE\n    this.edit = true\n    this.freeDraw._updateModel('edit', this.id)\n    this.freeDraw._refreshShapesInCanvas()\n    this._backupData()\n    return this\n  }\n\n  /**\n   * Finish Shape editing model and save\n   *\n   * @returns\n   * @memberof Shape\n   */\n  finish () {\n    this.edit = false\n    this.isCreate = false\n    this.freeDraw._updateModel('view')\n    this.shapeStyle = SHAPE_STYLE\n    if (this._toSVGPath && typeof this._toSVGPath === 'function') {\n      this._toSVGPath()\n    }\n    if (this._toJSONString && typeof this._toJSONString === 'function') {\n      this._toJSONString()\n    }\n    this.freeDraw._refreshShapesInCanvas()\n    return this\n  }\n\n  /**\n   * Cancel Shape editing\n   */\n  cancelEdit () {\n    this.shapeStyle = SHAPE_STYLE\n    this.edit = false\n    this.freeDraw._updateModel('view')\n    this._rollbackData()\n    this.freeDraw._refreshShapesInCanvas()\n    return this\n  }\n}\n\nexport default Shape\n"]},"metadata":{},"sourceType":"module"}