{"ast":null,"code":"import Shape from './shape';\nimport { HANDLE_LINE_STYLE } from './config';\n\nclass Ellipse extends Shape {\n  constructor(options) {\n    super(options);\n    this.x = Number(options.x.toFixed(this.freeDraw.fix));\n    this.y = Number(options.y.toFixed(this.freeDraw.fix));\n    this.radiusX = Number(options.radiusX.toFixed(this.freeDraw.fix));\n    this.radiusY = Number(options.radiusY.toFixed(this.freeDraw.fix));\n    this.rotation = options.rotation || 0;\n    this.startAngle = options.startAngle || 0;\n    this.endAngle = options.endAngle || 2 * Math.PI;\n    this.anticlockwise = options.anticlockwise || false;\n    this.xBackup = null;\n    this.yBackup = null;\n    this.radiusXBackup = null;\n    this.radiusYBackup = null;\n    this.rotationBackup = null;\n    this.startAngleBackup = null;\n    this.endAngleBackup = null;\n    this.anticlockwiseBackup = null;\n    this.handleLines = [];\n\n    this._initEllipse();\n  }\n\n  _initEllipse() {\n    this._initShape();\n\n    if (this.x && this.y && this.radiusX && this.radiusY) {\n      this._draw();\n\n      this._backupData();\n    }\n  }\n\n  _generateHandlePointsByPoints() {\n    const _this$getZoomAndMove = this.getZoomAndMove(),\n          x = _this$getZoomAndMove.x,\n          y = _this$getZoomAndMove.y,\n          radiusX = _this$getZoomAndMove.radiusX,\n          radiusY = _this$getZoomAndMove.radiusY;\n\n    this.handlePoints[0] = {\n      obj: null,\n      point: [x - radiusX, y - radiusY]\n    };\n    this.handlePoints[1] = {\n      obj: null,\n      point: [x + radiusX, y - radiusY]\n    };\n    this.handlePoints[2] = {\n      obj: null,\n      point: [x + radiusX, y + radiusY]\n    };\n    this.handlePoints[3] = {\n      obj: null,\n      point: [x - radiusX, y + radiusY]\n    };\n  }\n\n  _generateHandleLinesByPoints() {\n    const _this$getZoomAndMove2 = this.getZoomAndMove(),\n          x = _this$getZoomAndMove2.x,\n          y = _this$getZoomAndMove2.y,\n          radiusX = _this$getZoomAndMove2.radiusX,\n          radiusY = _this$getZoomAndMove2.radiusY;\n\n    this.handleLines[0] = {\n      obj: null,\n      startPoint: [x - radiusX, y - radiusY],\n      endPoint: [x + radiusX, y - radiusY]\n    };\n    this.handleLines[1] = {\n      obj: null,\n      startPoint: [x + radiusX, y - radiusY],\n      endPoint: [x + radiusX, y + radiusY]\n    };\n    this.handleLines[2] = {\n      obj: null,\n      startPoint: [x + radiusX, y + radiusY],\n      endPoint: [x - radiusX, y + radiusY]\n    };\n    this.handleLines[3] = {\n      obj: null,\n      startPoint: [x - radiusX, y + radiusY],\n      endPoint: [x - radiusX, y - radiusY]\n    };\n  }\n\n  _draw() {\n    this.shape = this._drawEllipse();\n\n    this._generateHandleLinesByPoints();\n\n    this._generateHandlePointsByPoints();\n\n    if (this.edit) {\n      this._drawEllipseHandleLines();\n\n      this._drawEllipseHandlePoints();\n    }\n  }\n\n  _drawEllipse() {\n    const _this$getZoomAndMove3 = this.getZoomAndMove(),\n          x = _this$getZoomAndMove3.x,\n          y = _this$getZoomAndMove3.y,\n          radiusX = _this$getZoomAndMove3.radiusX,\n          radiusY = _this$getZoomAndMove3.radiusY,\n          startAngle = _this$getZoomAndMove3.startAngle,\n          endAngle = _this$getZoomAndMove3.endAngle,\n          anticlockwise = _this$getZoomAndMove3.anticlockwise;\n\n    const newEllipse = new Path2D();\n    newEllipse.ellipse(x, y, radiusX, radiusY, startAngle, endAngle, anticlockwise);\n\n    this.freeDraw._updateCtxStyle(this.shapeStyle);\n\n    this.freeDraw.ctx.fill(newEllipse);\n    this.freeDraw.ctx.stroke(newEllipse);\n    return newEllipse;\n  }\n\n  _handleMouseMove(event) {\n    let x = event.offsetX,\n        y = event.offsetY;\n\n    if (this.clickedHandlePoint) {\n      const basePoint = this.handlePoints[this.clickedHandlePointIndex].point;\n\n      if ([0, 1, 2, 3].includes(this.clickedHandlePointIndex)) {\n        let radiusX = basePoint[0] - x;\n        let radiusY = basePoint[1] - y;\n\n        if (this.clickedHandlePointIndex === 1) {\n          radiusX = x - basePoint[0];\n        }\n\n        if (this.clickedHandlePointIndex === 2) {\n          radiusX = x - basePoint[0];\n          radiusY = y - basePoint[1];\n        }\n\n        if (this.clickedHandlePointIndex === 3) {\n          radiusY = y - basePoint[1];\n        }\n\n        radiusX = this.radiusX + radiusX / this.freeDraw.zoomLevel;\n        radiusY = this.radiusY + radiusY / this.freeDraw.zoomLevel;\n\n        if (radiusX > 0 && radiusY > 0) {\n          this.radiusX = Number(radiusX.toFixed(this.freeDraw.fix));\n          this.radiusY = Number(radiusY.toFixed(this.freeDraw.fix));\n        }\n      }\n\n      if (this.freeDraw.eventsReceive.includes('transform')) {\n        this.freeDraw.eventsCallBack(event, this.id, 'transform');\n      }\n    } else if (this.clickedShape) {\n      this.x = Number((this.x + (x - this.clickedShapePoint[0]) / this.freeDraw.zoomLevel).toFixed(this.freeDraw.fix));\n      this.y = Number((this.y + (y - this.clickedShapePoint[1]) / this.freeDraw.zoomLevel).toFixed(this.freeDraw.fix));\n      this.clickedShapePoint = [Number(x.toFixed(this.freeDraw.fix)), Number(y.toFixed(this.freeDraw.fix))];\n\n      if (this.freeDraw.eventsReceive.includes('drag')) {\n        this.freeDraw.eventsCallBack(event, this.id, 'drag');\n      }\n    }\n\n    this.freeDraw._refreshShapesInCanvas();\n  }\n\n  _drawEllipseHandlePoints() {\n    for (let i = 0; i < this.handlePoints.length; i++) {\n      this.handlePoints[i].obj = this._drawRectPoint(this.handlePoints[i].point[0], this.handlePoints[i].point[1], this.handlePointStyle.width, {\n        lineWidth: this.handlePointStyle.lineWidth,\n        fillStyle: this.handlePointStyle.fillStyle,\n        strokeStyle: this.handlePointStyle.strokeStyle\n      });\n    }\n  }\n\n  _drawEllipseHandleLines() {\n    for (let i = 0; i < this.handleLines.length; i++) {\n      this.handleLines[i].obj = this._drawLine(this.handleLines[i].startPoint, this.handleLines[i].endPoint, HANDLE_LINE_STYLE);\n    }\n  }\n\n  getZoomAndMove() {\n    let radiusX = Number((this.radiusX * this.freeDraw.zoomLevel).toFixed(this.freeDraw.fix));\n    let radiusY = Number((this.radiusY * this.freeDraw.zoomLevel).toFixed(this.freeDraw.fix));\n    let x = (this.x - this.freeDraw.transformCenter[0]) * this.freeDraw.zoomLevel + this.freeDraw.transformCenter[0];\n    let y = (this.y - this.freeDraw.transformCenter[1]) * this.freeDraw.zoomLevel + this.freeDraw.transformCenter[1];\n\n    if (this.freeDraw.offsetLeft !== 0) {\n      x += this.freeDraw.offsetLeft;\n    }\n\n    if (this.freeDraw.offsetTop !== 0) {\n      y += this.freeDraw.offsetTop;\n    }\n\n    return {\n      x: Number(x.toFixed(this.freeDraw.fix)),\n      y: Number(y.toFixed(this.freeDraw.fix)),\n      radiusX,\n      radiusY,\n      rotation: this.rotation,\n      startAngle: this.startAngle,\n      endAngle: this.endAngle,\n      anticlockwise: this.anticlockwise\n    };\n  }\n\n  _backupData() {\n    this.xBackup = this.x;\n    this.yBackup = this.y;\n    this.radiusXBackup = this.radiusX;\n    this.radiusYBackup = this.radiusY;\n    this.rotationBackup = this.rotation;\n    this.startAngleBackup = this.startAngle;\n    this.endAngleBackup = this.endAngle;\n    this.anticlockwiseBackup = this.anticlockwise;\n  }\n\n  _rollbackData() {\n    this.x = this.xBackup;\n    this.y = this.yBackup;\n    this.radiusX = this.radiusXBackup;\n    this.radiusY = this.radiusYBackup;\n    this.rotation = this.rotationBackup;\n    this.startAngle = this.startAngleBackup;\n    this.endAngle = this.endAngleBackup;\n    this.anticlockwise = this.anticlockwiseBackup;\n  }\n\n  _toSVGPath() {\n    const x = Number(this.x.toFixed(this.freeDraw.fix));\n    const y = Number(this.y.toFixed(this.freeDraw.fix));\n    const radiusX = Number(this.radiusX.toFixed(this.freeDraw.fix));\n    const radiusY = Number(this.radiusY.toFixed(this.freeDraw.fix));\n    this.SVGPath = `<ellipse cx=\"${x}\" cy=\"${y}\" rx=\"${radiusX}\" ry=\"${radiusY}\" />`;\n  }\n\n  _toJSONString() {\n    this.JSONString = JSON.stringify({\n      x: Number(this.x.toFixed(this.freeDraw.fix)),\n      y: Number(this.y.toFixed(this.freeDraw.fix)),\n      radiusX: Number(this.radiusX.toFixed(this.freeDraw.fix)),\n      radiusY: Number(this.radiusY.toFixed(this.freeDraw.fix))\n    });\n  }\n\n  getHandlePointCoordinate(handlePointIndex) {\n    if (this.handlePoints[handlePointIndex]) {\n      return this.handlePoints[handlePointIndex].point;\n    }\n\n    return null;\n  }\n\n}\n\nexport default Ellipse;","map":{"version":3,"sources":["/home/george/projects/beads/beads/node_modules/free-draw/src/ellipse.js"],"names":["Shape","HANDLE_LINE_STYLE","Ellipse","constructor","options","x","Number","toFixed","freeDraw","fix","y","radiusX","radiusY","rotation","startAngle","endAngle","Math","PI","anticlockwise","xBackup","yBackup","radiusXBackup","radiusYBackup","rotationBackup","startAngleBackup","endAngleBackup","anticlockwiseBackup","handleLines","_initEllipse","_initShape","_draw","_backupData","_generateHandlePointsByPoints","getZoomAndMove","handlePoints","obj","point","_generateHandleLinesByPoints","startPoint","endPoint","shape","_drawEllipse","edit","_drawEllipseHandleLines","_drawEllipseHandlePoints","newEllipse","Path2D","ellipse","_updateCtxStyle","shapeStyle","ctx","fill","stroke","_handleMouseMove","event","offsetX","offsetY","clickedHandlePoint","basePoint","clickedHandlePointIndex","includes","zoomLevel","eventsReceive","eventsCallBack","id","clickedShape","clickedShapePoint","_refreshShapesInCanvas","i","length","_drawRectPoint","handlePointStyle","width","lineWidth","fillStyle","strokeStyle","_drawLine","transformCenter","offsetLeft","offsetTop","_rollbackData","_toSVGPath","SVGPath","_toJSONString","JSONString","JSON","stringify","getHandlePointCoordinate","handlePointIndex"],"mappings":"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","sourcesContent":["import Shape from './shape'\n\nimport { HANDLE_LINE_STYLE } from './config'\n\nclass Ellipse extends Shape {\n  constructor (options) {\n    super(options)\n\n    this.x = Number(options.x.toFixed(this.freeDraw.fix))\n    this.y = Number(options.y.toFixed(this.freeDraw.fix))\n    this.radiusX = Number(options.radiusX.toFixed(this.freeDraw.fix))\n    this.radiusY = Number(options.radiusY.toFixed(this.freeDraw.fix))\n    this.rotation = options.rotation || 0\n    this.startAngle = options.startAngle || 0\n    this.endAngle = options.endAngle || 2 * Math.PI\n    this.anticlockwise = options.anticlockwise || false\n\n    this.xBackup = null\n    this.yBackup = null\n    this.radiusXBackup = null\n    this.radiusYBackup = null\n    this.rotationBackup = null\n    this.startAngleBackup = null\n    this.endAngleBackup = null\n    this.anticlockwiseBackup = null\n\n    this.handleLines = []\n\n    this._initEllipse()\n  }\n\n  _initEllipse () {\n    this._initShape()\n    if (this.x && this.y && this.radiusX && this.radiusY) {\n      this._draw()\n      this._backupData()\n    }\n  }\n\n  _generateHandlePointsByPoints () {\n    const { x, y, radiusX, radiusY } = this.getZoomAndMove()\n    this.handlePoints[0] = { obj: null, point: [x - radiusX, y - radiusY] }\n    this.handlePoints[1] = { obj: null, point: [x + radiusX, y - radiusY] }\n    this.handlePoints[2] = { obj: null, point: [x + radiusX, y + radiusY] }\n    this.handlePoints[3] = { obj: null, point: [x - radiusX, y + radiusY] }\n  }\n\n  _generateHandleLinesByPoints () {\n    const { x, y, radiusX, radiusY } = this.getZoomAndMove()\n    this.handleLines[0] = { obj: null, startPoint: [x - radiusX, y - radiusY], endPoint: [x + radiusX, y - radiusY] }\n    this.handleLines[1] = { obj: null, startPoint: [x + radiusX, y - radiusY], endPoint: [x + radiusX, y + radiusY] }\n    this.handleLines[2] = { obj: null, startPoint: [x + radiusX, y + radiusY], endPoint: [x - radiusX, y + radiusY] }\n    this.handleLines[3] = { obj: null, startPoint: [x - radiusX, y + radiusY], endPoint: [x - radiusX, y - radiusY] }\n  }\n\n  _draw () {\n    this.shape = this._drawEllipse()\n    this._generateHandleLinesByPoints()\n    this._generateHandlePointsByPoints()\n    if (this.edit) {\n      this._drawEllipseHandleLines()\n      this._drawEllipseHandlePoints()\n    }\n  }\n\n  _drawEllipse () {\n    const { x, y, radiusX, radiusY, startAngle, endAngle, anticlockwise } = this.getZoomAndMove()\n    const newEllipse = new Path2D()\n    newEllipse.ellipse(x, y, radiusX, radiusY, startAngle, endAngle, anticlockwise)\n    this.freeDraw._updateCtxStyle(this.shapeStyle)\n    this.freeDraw.ctx.fill(newEllipse)\n    this.freeDraw.ctx.stroke(newEllipse)\n    return newEllipse\n  }\n\n  _handleMouseMove (event) {\n    let { offsetX: x, offsetY: y } = event\n    if (this.clickedHandlePoint) {\n      const basePoint = this.handlePoints[this.clickedHandlePointIndex].point\n      if ([0, 1, 2, 3].includes(this.clickedHandlePointIndex)) {\n        let radiusX = basePoint[0] - x\n        let radiusY = basePoint[1] - y\n        if (this.clickedHandlePointIndex === 1) {\n          radiusX = x - basePoint[0]\n        }\n        if (this.clickedHandlePointIndex === 2) {\n          radiusX = x - basePoint[0]\n          radiusY = y - basePoint[1]\n        }\n        if (this.clickedHandlePointIndex === 3) {\n          radiusY = y - basePoint[1]\n        }\n        radiusX = this.radiusX + radiusX / this.freeDraw.zoomLevel\n        radiusY = this.radiusY + radiusY / this.freeDraw.zoomLevel\n        if (radiusX > 0 && radiusY > 0) {\n          this.radiusX = Number(radiusX.toFixed(this.freeDraw.fix))\n          this.radiusY = Number(radiusY.toFixed(this.freeDraw.fix))\n        }\n      }\n      if (this.freeDraw.eventsReceive.includes('transform')) {\n        this.freeDraw.eventsCallBack(event, this.id, 'transform')\n      }\n    } else if (this.clickedShape) {\n      this.x = Number((this.x + (x - this.clickedShapePoint[0]) / this.freeDraw.zoomLevel).toFixed(this.freeDraw.fix))\n      this.y = Number((this.y + (y - this.clickedShapePoint[1]) / this.freeDraw.zoomLevel).toFixed(this.freeDraw.fix))\n      this.clickedShapePoint = [Number(x.toFixed(this.freeDraw.fix)), Number(y.toFixed(this.freeDraw.fix))]\n      if (this.freeDraw.eventsReceive.includes('drag')) {\n        this.freeDraw.eventsCallBack(event, this.id, 'drag')\n      }\n    }\n    this.freeDraw._refreshShapesInCanvas()\n  }\n\n  _drawEllipseHandlePoints () {\n    for (let i = 0; i < this.handlePoints.length; i++) {\n      this.handlePoints[i].obj = this._drawRectPoint(\n        this.handlePoints[i].point[0],\n        this.handlePoints[i].point[1],\n        this.handlePointStyle.width,\n        {\n          lineWidth: this.handlePointStyle.lineWidth,\n          fillStyle: this.handlePointStyle.fillStyle,\n          strokeStyle: this.handlePointStyle.strokeStyle\n        }\n      )\n    }\n  }\n\n  _drawEllipseHandleLines () {\n    for (let i = 0; i < this.handleLines.length; i++) {\n      this.handleLines[i].obj = this._drawLine(this.handleLines[i].startPoint, this.handleLines[i].endPoint, HANDLE_LINE_STYLE)\n    }\n  }\n\n  getZoomAndMove () {\n    let radiusX = Number((this.radiusX * this.freeDraw.zoomLevel).toFixed(this.freeDraw.fix))\n    let radiusY = Number((this.radiusY * this.freeDraw.zoomLevel).toFixed(this.freeDraw.fix))\n    let x = (this.x - this.freeDraw.transformCenter[0]) * this.freeDraw.zoomLevel + this.freeDraw.transformCenter[0]\n    let y = (this.y - this.freeDraw.transformCenter[1]) * this.freeDraw.zoomLevel + this.freeDraw.transformCenter[1]\n    if (this.freeDraw.offsetLeft !== 0) {\n      x += this.freeDraw.offsetLeft\n    }\n    if (this.freeDraw.offsetTop !== 0) {\n      y += this.freeDraw.offsetTop\n    }\n    return {\n      x: Number(x.toFixed(this.freeDraw.fix)),\n      y: Number(y.toFixed(this.freeDraw.fix)),\n      radiusX,\n      radiusY,\n      rotation: this.rotation,\n      startAngle: this.startAngle,\n      endAngle: this.endAngle,\n      anticlockwise: this.anticlockwise\n    }\n  }\n\n  _backupData () {\n    this.xBackup = this.x\n    this.yBackup = this.y\n    this.radiusXBackup = this.radiusX\n    this.radiusYBackup = this.radiusY\n    this.rotationBackup = this.rotation\n    this.startAngleBackup = this.startAngle\n    this.endAngleBackup = this.endAngle\n    this.anticlockwiseBackup = this.anticlockwise\n  }\n\n  _rollbackData () {\n    this.x = this.xBackup\n    this.y = this.yBackup\n    this.radiusX = this.radiusXBackup\n    this.radiusY = this.radiusYBackup\n    this.rotation = this.rotationBackup\n    this.startAngle = this.startAngleBackup\n    this.endAngle = this.endAngleBackup\n    this.anticlockwise = this.anticlockwiseBackup\n  }\n\n  _toSVGPath () {\n    const x = Number(this.x.toFixed(this.freeDraw.fix))\n    const y = Number(this.y.toFixed(this.freeDraw.fix))\n    const radiusX = Number(this.radiusX.toFixed(this.freeDraw.fix))\n    const radiusY = Number(this.radiusY.toFixed(this.freeDraw.fix))\n    this.SVGPath = `<ellipse cx=\"${x}\" cy=\"${y}\" rx=\"${radiusX}\" ry=\"${radiusY}\" />`\n  }\n\n  _toJSONString () {\n    this.JSONString = JSON.stringify({\n      x: Number(this.x.toFixed(this.freeDraw.fix)),\n      y: Number(this.y.toFixed(this.freeDraw.fix)),\n      radiusX: Number(this.radiusX.toFixed(this.freeDraw.fix)),\n      radiusY: Number(this.radiusY.toFixed(this.freeDraw.fix))\n    })\n  }\n\n  getHandlePointCoordinate (handlePointIndex) {\n    if (this.handlePoints[handlePointIndex]) {\n      return this.handlePoints[handlePointIndex].point\n    }\n    return null\n  }\n}\n\nexport default Ellipse\n"]},"metadata":{},"sourceType":"module"}