{"ast":null,"code":"import Rect from './rect';\nimport Ellipse from './ellipse';\nimport Polygon from './polygon';\n\nclass FreeDraw {\n  constructor(options) {\n    this.ctx = null;\n    this.canvasDOM = options.canvas; // Shape events callback\n\n    this.eventsCallBack = options.eventsCallBack; // ['mouseenter', 'mouseleave', 'drag', 'transform']\n\n    this.eventsReceive = options.eventsReceive || ['mouseenter', 'mouseleave']; // FreeDraw model view/edit\n\n    this.model = 'view';\n    this.editingId = null; // Record whether the last click clicked on the shape\n\n    this.isClickedShape = false;\n    this.clickedShapeId = null; // key -> shapeId       value -> shape object\n\n    this.shapeInCanvas = {}; // Offset data\n\n    this.zoomLevel = 1.0;\n    this.offsetTop = 0;\n    this.offsetLeft = 0;\n    this.transformCenter = [0, 0]; // events keys map\n\n    this.eventsKeysMap = {};\n    this.fix = 2;\n\n    this._initFreeDraw();\n  }\n  /**\n   * Init FreeDraw Object\n   *\n   * @memberof FreeDraw\n   */\n\n\n  _initFreeDraw() {\n    this.ctx = this.canvasDOM.getContext('2d'); // Handle canvas events\n\n    this.canvasDOM.addEventListener('mousedown', this._distributeEvents.bind(this));\n    this.canvasDOM.addEventListener('mousemove', this._distributeEvents.bind(this));\n    this.canvasDOM.addEventListener('mouseup', this._distributeEvents.bind(this));\n    window.document.addEventListener('keydown', this._distributeEvents.bind(this));\n  }\n  /**\n   * Distribute events to shapes\n   *\n   * @param {*} event\n   * @memberof FreeDraw\n   */\n\n\n  _distributeEvents(event) {\n    const type = event.type,\n          x = event.offsetX,\n          y = event.offsetY;\n\n    if (this.model === 'view') {\n      // ignore keydown event when in view model\n      if (type === 'keydown') {\n        return;\n      } // Only check if user clicked shape\n\n\n      if (type === 'mousedown') {\n        for (let shapeKey in this.shapeInCanvas) {\n          const shapeObj = this.shapeInCanvas[shapeKey];\n\n          if (shapeObj._includes(x, y)) {\n            this.clickedShapeId = shapeKey;\n            this.isClickedShape = true;\n\n            if (shapeObj.clickTimer === null) {\n              shapeObj.clickTime = new Date().getTime();\n            } else {\n              const maxInterval = 500;\n              const currentClickTime = new Date().getTime();\n\n              if (currentClickTime - shapeObj.clickTime <= maxInterval) {\n                if (this.eventsReceive.includes('doubleclick')) {\n                  this.eventsCallBack(event, shapeObj.id, 'doubleclick');\n                }\n              } else {\n                shapeObj.clickTime = new Date().getTime();\n              }\n            }\n          }\n        }\n      } else if (type === 'mouseup') {\n        this.clickedShapeId = null;\n        this.isClickedShape = false;\n      }\n\n      if (this.eventsCallBack && typeof this.eventsCallBack === 'function') {\n        for (let key in this.shapeInCanvas) {\n          const shapeObj = this.shapeInCanvas[key];\n\n          if (shapeObj._includes(x, y)) {\n            if (!this.eventsKeysMap[key]) {\n              this.eventsKeysMap[key] = 'mouse-enter';\n\n              if (this.eventsReceive.includes('mouseenter')) {\n                this.eventsCallBack(event, key, 'mouseenter');\n              }\n            } else {\n              if (this.eventsReceive.includes('mousemove')) {\n                this.eventsCallBack(event, key, 'mousemove');\n              }\n            }\n          } else {\n            if (this.eventsKeysMap[key]) {\n              this.eventsKeysMap[key] = undefined;\n\n              if (this.eventsReceive.includes('mouseleave')) {\n                this.eventsCallBack(event, key, 'mouseleave');\n              }\n            }\n          }\n        }\n      }\n    } else if (this.model === 'edit') {\n      // Only trigger event for editing shape\n      const editingShape = this.shapeInCanvas[this.editingId];\n\n      if (editingShape) {\n        editingShape._trigger(event);\n\n        if (type === 'mousedown') {\n          if (editingShape._includes(x, y)) {\n            this.isClickedShape = true;\n            this.clickedShapeId = editingShape.id;\n          }\n        } else if (type === 'mouseup') {\n          this.isClickedShape = false;\n          this.clickedShapeId = null;\n        }\n      }\n    }\n  }\n  /**\n   * Update ctx style\n   *\n   * @param {Object} style\n   * @memberof FreeDraw\n   */\n\n\n  _updateCtxStyle(style) {\n    if (style.lineWidth) {\n      this.ctx.lineWidth = style.lineWidth;\n    }\n\n    if (style.fillStyle) {\n      this.ctx.fillStyle = style.fillStyle;\n    }\n\n    if (style.strokeStyle) {\n      this.ctx.strokeStyle = style.strokeStyle;\n    }\n  }\n  /**\n   * Remove Shape by shapeId\n   *\n   * @param {String} shapeId\n   * @returns {FreeDraw}\n   * @memberof FreeDraw\n   */\n\n\n  removeShape(shapeId) {\n    if (this.shapeInCanvas[shapeId]) {\n      delete this.shapeInCanvas[shapeId];\n    }\n\n    if (this.model === 'edit' && this.editingId === shapeId) {\n      this.model = 'view';\n      this.editingId = null;\n    }\n\n    this._refreshShapesInCanvas();\n\n    return this;\n  }\n  /**\n   * Remove all shapes\n   *\n   * @returns\n   * @memberof FreeDraw\n   */\n\n\n  removeAllShape() {\n    this.shapeInCanvas = {};\n\n    this._refreshShapesInCanvas();\n\n    return this;\n  }\n  /**\n   * Update FreeDraw model\n   * @param {Sting} model\n   * @param {Sting} editingId\n   */\n\n\n  _updateModel(model, editingId) {\n    this.model = model || 'view';\n    this.editingId = editingId || null;\n  }\n  /**\n   * Remove all shapes in canvas\n   */\n\n\n  _clearCanvas() {\n    this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n    return this;\n  }\n  /**\n   * Refresh canvas shape by { shapeInCanvas } Object\n   */\n\n\n  _refreshShapesInCanvas() {\n    this._clearCanvas();\n\n    for (let key in this.shapeInCanvas) {\n      this.shapeInCanvas[key]._draw();\n    }\n  }\n\n  zoomAndOffset(zoomLevel, transformCenter, offsetLeft, offsetTop) {\n    if (zoomLevel) {\n      this.zoomLevel = zoomLevel;\n    }\n\n    if (offsetTop !== undefined) {\n      this.offsetTop = offsetTop;\n    }\n\n    if (offsetLeft !== undefined) {\n      this.offsetLeft = offsetLeft;\n    }\n\n    if (transformCenter) {\n      this.transformCenter = transformCenter;\n    }\n\n    this._refreshShapesInCanvas();\n  }\n\n  addShape(options) {\n    if (this.model === 'edit') {\n      throw new Error(`Can not add another shape in edit model`);\n    }\n\n    const type = options.type,\n          id = options.id;\n\n    if (!id) {\n      throw new Error(`Shape id can not be empty`);\n    }\n\n    if (this.shapeInCanvas[id]) {\n      throw new Error(`Shape id must be unique, shape id '${id}' has already exist`);\n    }\n\n    this._updateModel('edit', id);\n\n    if (type === 'rect') {\n      this.shapeInCanvas[id] = this._addRect(options);\n      return this.shapeInCanvas[id];\n    }\n\n    if (type === 'ellipse') {\n      this.shapeInCanvas[id] = this._addEllipse(options);\n      return this.shapeInCanvas[id];\n    }\n\n    if (type === 'polygon') {\n      this.shapeInCanvas[id] = new Polygon(Object.assign({}, {\n        freeDraw: this\n      }, options));\n      return this.shapeInCanvas[id];\n    }\n  }\n\n  _addRect(options) {\n    let id = options.id,\n        type = options.type,\n        shapeStyle = options.shapeStyle,\n        handlePointStyle = options.handlePointStyle,\n        startPoint = options.startPoint,\n        width = options.width,\n        height = options.height,\n        transform = options.transform;\n\n    if (transform) {\n      const result = this.removeZoomAndMoveRect(width, height, startPoint);\n      width = result.width;\n      height = result.height;\n      startPoint = result.startPoint;\n    }\n\n    return new Rect({\n      id,\n      type,\n      width,\n      height,\n      startPoint,\n      shapeStyle,\n      handlePointStyle,\n      freeDraw: this\n    });\n  }\n\n  _addEllipse(options) {\n    let id = options.id,\n        type = options.type,\n        shapeStyle = options.shapeStyle,\n        handlePointStyle = options.handlePointStyle,\n        x = options.x,\n        y = options.y,\n        radiusX = options.radiusX,\n        radiusY = options.radiusY,\n        transform = options.transform;\n\n    if (transform) {\n      const result = this.removeZoomAndMoveEllipse(x, y, radiusX, radiusY);\n      x = result.x;\n      y = result.y;\n      radiusX = result.radiusX;\n      radiusY = result.radiusY;\n    }\n\n    return new Ellipse({\n      id,\n      type,\n      x,\n      y,\n      radiusX,\n      radiusY,\n      shapeStyle,\n      handlePointStyle,\n      freeDraw: this\n    });\n  }\n\n  removeZoomAndMoveRect(width, height, startPoint) {\n    width = width / this.zoomLevel;\n    height = height / this.zoomLevel;\n    let x = startPoint[0];\n    let y = startPoint[1];\n\n    if (this.offsetLeft !== 0) {\n      x -= this.offsetLeft;\n    }\n\n    if (this.offsetTop !== 0) {\n      y -= this.offsetTop;\n    }\n\n    x = (x - this.transformCenter[0]) / this.zoomLevel + this.transformCenter[0];\n    y = (y - this.transformCenter[1]) / this.zoomLevel + this.transformCenter[1];\n    return {\n      width,\n      height,\n      startPoint: [x, y]\n    };\n  }\n\n  removeZoomAndMoveEllipse(x, y, radiusX, radiusY) {\n    radiusX = radiusX / this.zoomLevel;\n    radiusY = radiusY / this.zoomLevel;\n\n    if (this.offsetLeft !== 0) {\n      x -= this.offsetLeft;\n    }\n\n    if (this.offsetTop !== 0) {\n      y -= this.offsetTop;\n    }\n\n    x = (x - this.transformCenter[0]) / this.zoomLevel + this.transformCenter[0];\n    y = (y - this.transformCenter[1]) / this.zoomLevel + this.transformCenter[1];\n    return {\n      x,\n      y,\n      radiusX,\n      radiusY\n    };\n  }\n\n}\n\nexport default FreeDraw;","map":{"version":3,"sources":["/home/george/projects/beads/beads/node_modules/free-draw/src/index.js"],"names":["Rect","Ellipse","Polygon","FreeDraw","constructor","options","ctx","canvasDOM","canvas","eventsCallBack","eventsReceive","model","editingId","isClickedShape","clickedShapeId","shapeInCanvas","zoomLevel","offsetTop","offsetLeft","transformCenter","eventsKeysMap","fix","_initFreeDraw","getContext","addEventListener","_distributeEvents","bind","window","document","event","type","x","offsetX","y","offsetY","shapeKey","shapeObj","_includes","clickTimer","clickTime","Date","getTime","maxInterval","currentClickTime","includes","id","key","undefined","editingShape","_trigger","_updateCtxStyle","style","lineWidth","fillStyle","strokeStyle","removeShape","shapeId","_refreshShapesInCanvas","removeAllShape","_updateModel","_clearCanvas","clearRect","width","height","_draw","zoomAndOffset","addShape","Error","_addRect","_addEllipse","Object","assign","freeDraw","shapeStyle","handlePointStyle","startPoint","transform","result","removeZoomAndMoveRect","radiusX","radiusY","removeZoomAndMoveEllipse"],"mappings":"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","sourcesContent":["import Rect from './rect'\nimport Ellipse from './ellipse'\nimport Polygon from './polygon'\n\nclass FreeDraw {\n  constructor (options) {\n    this.ctx = null\n    this.canvasDOM = options.canvas\n\n    // Shape events callback\n    this.eventsCallBack = options.eventsCallBack\n\n    // ['mouseenter', 'mouseleave', 'drag', 'transform']\n    this.eventsReceive = options.eventsReceive || ['mouseenter', 'mouseleave']\n\n    // FreeDraw model view/edit\n    this.model = 'view'\n    this.editingId = null\n\n    // Record whether the last click clicked on the shape\n    this.isClickedShape = false\n    this.clickedShapeId = null\n\n    // key -> shapeId       value -> shape object\n    this.shapeInCanvas = {}\n\n    // Offset data\n    this.zoomLevel = 1.0\n    this.offsetTop = 0\n    this.offsetLeft = 0\n    this.transformCenter = [0, 0]\n\n    // events keys map\n    this.eventsKeysMap = {}\n\n    this.fix = 2\n\n    this._initFreeDraw()\n  }\n\n  /**\n   * Init FreeDraw Object\n   *\n   * @memberof FreeDraw\n   */\n  _initFreeDraw () {\n    this.ctx = this.canvasDOM.getContext('2d')\n\n    // Handle canvas events\n    this.canvasDOM.addEventListener('mousedown', this._distributeEvents.bind(this))\n    this.canvasDOM.addEventListener('mousemove', this._distributeEvents.bind(this))\n    this.canvasDOM.addEventListener('mouseup', this._distributeEvents.bind(this))\n    window.document.addEventListener('keydown', this._distributeEvents.bind(this))\n  }\n\n  /**\n   * Distribute events to shapes\n   *\n   * @param {*} event\n   * @memberof FreeDraw\n   */\n  _distributeEvents (event) {\n    const { type, offsetX: x, offsetY: y } = event\n    if (this.model === 'view') {\n      // ignore keydown event when in view model\n      if (type === 'keydown') {\n        return\n      }\n      // Only check if user clicked shape\n      if (type === 'mousedown') {\n        for (let shapeKey in this.shapeInCanvas) {\n          const shapeObj = this.shapeInCanvas[shapeKey]\n          if (shapeObj._includes(x, y)) {\n            this.clickedShapeId = shapeKey\n            this.isClickedShape = true\n            if (shapeObj.clickTimer === null) {\n              shapeObj.clickTime = new Date().getTime()\n            } else {\n              const maxInterval = 500\n              const currentClickTime = new Date().getTime()\n              if (currentClickTime - shapeObj.clickTime <= maxInterval) {\n                if (this.eventsReceive.includes('doubleclick')) {\n                  this.eventsCallBack(event, shapeObj.id, 'doubleclick')\n                }\n              } else {\n                shapeObj.clickTime = new Date().getTime()\n              }\n            }\n          }\n        }\n      } else if (type === 'mouseup') {\n        this.clickedShapeId = null\n        this.isClickedShape = false\n      }\n      if (this.eventsCallBack && typeof this.eventsCallBack === 'function') {\n        for (let key in this.shapeInCanvas) {\n          const shapeObj = this.shapeInCanvas[key]\n          if (shapeObj._includes(x, y)) {\n            if (!this.eventsKeysMap[key]) {\n              this.eventsKeysMap[key] = 'mouse-enter'\n              if (this.eventsReceive.includes('mouseenter')) {\n                this.eventsCallBack(event, key, 'mouseenter')\n              }\n            } else {\n              if (this.eventsReceive.includes('mousemove')) {\n                this.eventsCallBack(event, key, 'mousemove')\n              }\n            }\n          } else {\n            if (this.eventsKeysMap[key]) {\n              this.eventsKeysMap[key] = undefined\n              if (this.eventsReceive.includes('mouseleave')) {\n                this.eventsCallBack(event, key, 'mouseleave')\n              }\n            }\n          }\n        }\n      }\n    } else if (this.model === 'edit') {\n      // Only trigger event for editing shape\n      const editingShape = this.shapeInCanvas[this.editingId]\n      if (editingShape) {\n        editingShape._trigger(event)\n        if (type === 'mousedown') {\n          if (editingShape._includes(x, y)) {\n            this.isClickedShape = true\n            this.clickedShapeId = editingShape.id\n          }\n        } else if (type === 'mouseup') {\n          this.isClickedShape = false\n          this.clickedShapeId = null\n        }\n      }\n    }\n  }\n\n  /**\n   * Update ctx style\n   *\n   * @param {Object} style\n   * @memberof FreeDraw\n   */\n  _updateCtxStyle (style) {\n    if (style.lineWidth) {\n      this.ctx.lineWidth = style.lineWidth\n    }\n    if (style.fillStyle) {\n      this.ctx.fillStyle = style.fillStyle\n    }\n    if (style.strokeStyle) {\n      this.ctx.strokeStyle = style.strokeStyle\n    }\n  }\n\n  /**\n   * Remove Shape by shapeId\n   *\n   * @param {String} shapeId\n   * @returns {FreeDraw}\n   * @memberof FreeDraw\n   */\n  removeShape (shapeId) {\n    if (this.shapeInCanvas[shapeId]) {\n      delete this.shapeInCanvas[shapeId]\n    }\n    if (this.model === 'edit' && this.editingId === shapeId) {\n      this.model = 'view'\n      this.editingId = null\n    }\n    this._refreshShapesInCanvas()\n    return this\n  }\n\n  /**\n   * Remove all shapes\n   *\n   * @returns\n   * @memberof FreeDraw\n   */\n  removeAllShape () {\n    this.shapeInCanvas = {}\n    this._refreshShapesInCanvas()\n    return this\n  }\n\n  /**\n   * Update FreeDraw model\n   * @param {Sting} model\n   * @param {Sting} editingId\n   */\n  _updateModel (model, editingId) {\n    this.model = model || 'view'\n    this.editingId = editingId || null\n  }\n\n  /**\n   * Remove all shapes in canvas\n   */\n  _clearCanvas () {\n    this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height)\n    return this\n  }\n\n  /**\n   * Refresh canvas shape by { shapeInCanvas } Object\n   */\n  _refreshShapesInCanvas () {\n    this._clearCanvas()\n    for (let key in this.shapeInCanvas) {\n      this.shapeInCanvas[key]._draw()\n    }\n  }\n\n  zoomAndOffset (zoomLevel, transformCenter, offsetLeft, offsetTop) {\n    if (zoomLevel) {\n      this.zoomLevel = zoomLevel\n    }\n    if (offsetTop !== undefined) {\n      this.offsetTop = offsetTop\n    }\n    if (offsetLeft !== undefined) {\n      this.offsetLeft = offsetLeft\n    }\n    if (transformCenter) {\n      this.transformCenter = transformCenter\n    }\n    this._refreshShapesInCanvas()\n  }\n\n  addShape (options) {\n    if (this.model === 'edit') {\n      throw new Error(`Can not add another shape in edit model`)\n    }\n    const { type, id } = options\n    if (!id) {\n      throw new Error(`Shape id can not be empty`)\n    }\n    if (this.shapeInCanvas[id]) {\n      throw new Error(`Shape id must be unique, shape id '${id}' has already exist`)\n    }\n    this._updateModel('edit', id)\n    if (type === 'rect') {\n      this.shapeInCanvas[id] = this._addRect(options)\n      return this.shapeInCanvas[id]\n    }\n    if (type === 'ellipse') {\n      this.shapeInCanvas[id] = this._addEllipse(options)\n      return this.shapeInCanvas[id]\n    }\n    if (type === 'polygon') {\n      this.shapeInCanvas[id] = new Polygon(Object.assign({}, { freeDraw: this }, options))\n      return this.shapeInCanvas[id]\n    }\n  }\n\n  _addRect (options) {\n    let { id, type, shapeStyle, handlePointStyle, startPoint, width, height, transform } = options\n    if (transform) {\n      const result = this.removeZoomAndMoveRect(width, height, startPoint)\n      width = result.width\n      height = result.height\n      startPoint = result.startPoint\n    }\n    \n    return new Rect({\n      id,\n      type,\n      width,\n      height,\n      startPoint,\n      shapeStyle,\n      handlePointStyle,\n      freeDraw: this\n    })\n  }\n\n  _addEllipse (options) {\n    let { id, type, shapeStyle, handlePointStyle, x, y, radiusX, radiusY, transform } = options\n    if (transform) {\n      const result = this.removeZoomAndMoveEllipse(x, y, radiusX, radiusY)\n      x = result.x\n      y = result.y\n      radiusX = result.radiusX\n      radiusY = result.radiusY\n    }\n    return new Ellipse({\n      id,\n      type,\n      x,\n      y,\n      radiusX,\n      radiusY,\n      shapeStyle,\n      handlePointStyle,\n      freeDraw: this\n    })\n  }\n\n  removeZoomAndMoveRect (width, height, startPoint) {\n    width = width / this.zoomLevel\n    height = height / this.zoomLevel\n    let x = startPoint[0]\n    let y = startPoint[1]\n    if (this.offsetLeft !== 0) {\n      x -= this.offsetLeft\n    }\n    if (this.offsetTop !== 0) {\n      y -= this.offsetTop\n    }\n    x = ((x - this.transformCenter[0]) / this.zoomLevel) + this.transformCenter[0]\n    y = ((y - this.transformCenter[1]) / this.zoomLevel) + this.transformCenter[1]\n    return {\n      width,\n      height,\n      startPoint: [x, y]\n    }\n  }\n\n  removeZoomAndMoveEllipse (x, y, radiusX, radiusY) {\n    radiusX = radiusX / this.zoomLevel\n    radiusY = radiusY / this.zoomLevel\n    if (this.offsetLeft !== 0) {\n      x -= this.offsetLeft\n    }\n    if (this.offsetTop !== 0) {\n      y -= this.offsetTop\n    }\n    x = ((x - this.transformCenter[0]) / this.zoomLevel) + this.transformCenter[0]\n    y = ((y - this.transformCenter[1]) / this.zoomLevel) + this.transformCenter[1]\n    return {\n      x,\n      y,\n      radiusX,\n      radiusY\n    }\n  }\n}\n\nexport default FreeDraw\n"]},"metadata":{},"sourceType":"module"}